* Doom Emacs

use ~(org-babel-load-file)~

* Ideas

* Setup/Config

** Doom Modules

** Packages

*** TODO evaluate [[https://github.com/dkogan/xcscope.el][xcscope.el]]
*** TODO org-capture test
*** DONE treemacs-icons
CLOSED: [2021-04-26 Mon 22:58]

** Desktop, Projectile, Workspace, Treemacs

What's the ideal way to approach this for various projects?

** Misc Config:
*** TODO setup word-wrap? and call on file save

* The Important Things In Life:
** Try =toggle-debug-on-error=
+ or =+emacslisp/edebug-instrument-defun-on=
+ or =view-emacs-debugging=

* Workflow

** Metaprojects

** Git Worktree

*** TODO describe using git worktree to experiment with emacs dotfiles
+ would this require copies of both =~/.doom.d= and =~./emacs.d=?
  - if so, then without some means of addressing it, that may be prohibitively
    complicated
  - is there any advice on this
+ use case: explore other users dotfiles with far less disruption
+ use case: explore new modes/modules with less overhead

* Learning about Doom Emacs

** Reflecting on Doom

*** Extracting Information About Loaded Packages

Doom includes ~(+doom/help-packages)~ and, for its call to the [[help:interactive][interactive]]
special form, it builds via mapcar the value =doom--help-packages-list= from
other lists including one from ~(hash-table-keys straight--build-cache)~. This
last value contains

This and other module loading code can be found in
[[file:~/.emacs.d/core/autoload/help.el::(interactive][.emacs.d/core/autoload/help.el]]. These references can easily be collected from
around the emacs internals via =org-store-link=.

By using =doom-before-init-modules-hook= and =doom-init-modules-hook= to output
the =straight--build-cache= keys, then diffing the two resulting hashes should
yield the set of packages introduced by doom's modules and those added via =use-package!= calls in config.el.

**** TODO examine doom autodefs (concept & source)

* Resources

+ [[https://www.emacswiki.org/emacs/][Emacs Wiki]]

** Emacs Lisp

+ [[https://www.emacswiki.org/emacs/ElispCookbook][Elisp Cookbook]]
+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Files.html][Handling Files]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html][Joining Paths]]
