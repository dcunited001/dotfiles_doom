:PROPERTIES:
:ID:       7560a9fe-d074-43c3-9cf5-8bd8c79d53fe
:END:
#+TITLE: Doom Emacs Config
#+AUTHOR: David Conner
#+DESCRIPTION: Inspired by the personal Doom Emacs config of Daviwil, DT, HaoZeke and others
#+STARTUP: content
#+OPTIONS: toc:nil

* About this file

This is an Emacs literate config, drawing inspiration from the following configs
below. It's definitely a work in progress and the build will probably break for
every other SHA. There's a list of much better configs in the org footnotes at
the end of the doc.

+ [[https://github.com/gilbertw1/emacs-literate-starter/][gilbertw1/emacs-literate-starter]]
+ [[https://github.com/HaoZeke/dotDoom][HaoZeke/dotDoom]]
+ And others

** Please excuse the mess

I'm spending a lot of time sampling the space of available options & developing
some familiarity with elisp. I've been through this before, and I don't want to
regret missing out on all the "unknown unknown" tools & workflow approaches. I'm
starting with a sparse sample of the entire space to avoid sticky local minimums
or to avoid totally biased exploration in a small subset of dimensions. It's
like "stochastic gradient descent" or building a sparse understanding of the
hyperplane for an infinite-dimensional problem (like a kernel method)...

I hope to move on to projects in other languages soon, but for now things are a
mess. The errant TODO statements will be thinned out soon enough.

** Approach to TOC

The TOC is loosely based on the Doom Emacs categories to make it simpler for
others to grok the structure and simpler for me to organize. The TOC headings
are generated with =toc-org= by specifying a heading including the tag:
=:TOC_3_gh:=.

** Tangle Output

Add the =doom-emacs= metadata comments to tangle exports:

+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html][lexical binding in emacs]]

#+BEGIN_SRC  emacs-lisp :tangle ./config.el
;; -*- lexical-binding: t; -*-
;;* ~/.doom.d/config.el
(setq user-full-name "David Conner"
      user-mail-address "noreply@te.xel.io")
#+END_SRC

When specified by =:tangle=, export the =(package! ...)= declarations to =packages.el=.

#+BEGIN_SRC emacs-lisp :tangle ./packages.el
;; -*- no-byte-compile: t; 
;;* ~/.doom.d/packages.el
#+END_SRC

There may be other babel source blocks. Eventually, I would like include some
elisp code for reflecting on Doom Emacs (e.g. extracting a list of packages
added by Doom modules).

**** TODO place light semantic-versioning constraints on packages
+ ~(package asdfoo-bar :pin 1234)~
**** TODO performance adjustments
+ follow advice in [[file:~/.emacs.d/docs/faq.org::*How does Doom start up so quickly?][Doom FAQ]]
+ figureout what's keeping this in custom.el ~'(auth-source-save-behavior nil)~

**** TODO performance adjustments
+ follow advice in [[file:~/.emacs.d/docs/faq.org::*How does Doom start up so quickly?][Doom FAQ]]
+ figureout what's keeping this in custom.el ~'(auth-source-save-behavior nil)~

* Table of Contents :TOC_2_gh:
- [[#about-this-file][About this file]]
  - [[#please-excuse-the-mess][Please excuse the mess]]
  - [[#approach-to-toc][Approach to TOC]]
  - [[#tangle-output][Tangle Output]]
- [[#configel][Config.el]]
  - [[#input][INPUT]]
  - [[#completion][COMPLETION]]
  - [[#ui][UI]]
  - [[#editor][EDITOR]]
  - [[#emacs][EMACS]]
  - [[#term][TERM]]
  - [[#checkers][CHECKERS]]
  - [[#tools][TOOLS]]
  - [[#lsp][LSP]]
  - [[#os][OS]]
  - [[#org][ORG]]
  - [[#lang][LANG]]
  - [[#babel][BABEL]]
  - [[#firewall][FIREWALL]]
  - [[#email][EMAIL]]
  - [[#app][APP]]
  - [[#config][CONFIG]]
  - [[#hydras][HYDRAS]]
- [[#footnotes][Footnotes]]

**** TODO set =straight-host-usernames=
- to quickly fork elisp repos and work from within =.emacs.doom/.local/straight/repo/$FORKREPO=

* Config.el :doom:config:
:PROPERTIES:
:header-args: :tangle ./config.el :comments link
:END:

Packages will remain installed until you:

#+begin_src sh :tangle no
bin/doom purge
bin/doom clean
bin/doom (upgrade|sync|build)
#+end_src

** INPUT

*** Input Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** INPUT
#+end_src

*** Input Configs

#+begin_src emacs-lisp
;;** INPUT

;;** IDO
(when (featurep 'ido)
  (message "Disabling ido-mode")
  (ido-mode nil))

;; (map! "C-c f d" #'dired
;;       "C-x d" #'dired)

;; Fixes problems with dead keys
(require 'iso-transl)

;;*** Point Movements

;;*** Lispy
(setq lispy-compat '(cider edebug))
(setq auto-minor-mode-alist
      (append
       '(("/\\.dir-locals\\.el$" . lispy-mode))
       auto-minor-mode-alist))

;;*** Mouse

(setq mouse-wheel-progressive-speed nil
      mouse-wheel-scroll-amount '(8)
      mouse-drag-and-drop-region t)

;;*** Experimental Mouse

;;**** Razor (previous/next)
;; for now, simply back/forward buffer
;; TODO: change =forward= to bufler or emacs-tab bar?
(map! "S-<mouse-8>" 'previous-buffer)
;; TODO something else: (map! "S-<mouse-9>" 'next-buffer)

(map! "<mouse-8>" '+fold/toggle)
(map! "<mouse-9> " 'er/expand-region)
(map! "S-<mouse-9> " 'er/contract-region)

;; (map! "<mouse-8>" 'counsel-grep-or-swiper)
;; (map! "<mouse-9> " 'swiper-all-buffer-p)
;; (map! "C-<mouse-8>" '+ivy/switch-buffer)
;; (map! "C-<mouse-9>" '+ivy/switch-workspace-buffer)
(map! "C-S-<mouse-8>" 'projectile-find-file)
(map! "C-S-<mouse-9>" 'projectile-grep)

;; (map! "C-M-<mouse-8>" '+workspace/switch-right)
;; (map! "C-M-<mouse-9>" '+workspace/switch-right)
;; (map! "M-S-<mouse-8>" 'doom/save-session) ;; TODO: remap
;; (map! "M-S-<mouse-9>" 'doom/load-session) ;; TODO: remap
;; (map! "M-<mouse-8>" 'better-jumper-jump-backward)

;; TODO: something else (map! "M-<mouse-9>" 'better-jumper-jump-backward)

;;**** Origami

(map! "<mouse-12>" 'origami-toggle-node)
(map! "C-<mouse-12>" 'origami-open-node-recursively)
(map! "C-S-<mouse-12>" 'origami-close-node-recursively)

(map! "M-<mouse-12>" 'origami-forward-fold)
(map! "S-<mouse-12>" 'origami-backward-fold-same-level)
(map! "M-S-<mouse-12>" 'origami-forward-fold-same-level)

(map! "C-M-<mouse-12>" 'origami-close-all-nodes)
(map! "C-M-S-<mouse-12>" 'origami-open-all-nodes)

;; (map! "M-S-<mouse-12>" 'origami-show-only-node)

;;**** Hydras

(map! "M-<mouse-14>" 'which-key-show-major-mode)
#+end_src

[[file:~/.emacs.d/core/core-keybinds.el][.emacs.d/core/core-keybinds.el]] makes for a very useful key & map! reference

*** Point Movement

*** Lispy

[[https://oremacs.com/lispy/][Keymap reference]] for [[https://github.com/abo-abo/lispy][Lispy]]. "[[https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-10.html#%25_sec_1.1.5][Always be evaling]]"

**** TODO setup lispy to run automatically in cider-mode

*** Mouse :mouse:

see [[ergoemacs.org/emacs/emacs_mouse_wheel_config.html][Xah Lee's post on Mouse Config]] for more info on the how & why

**** Mouse 8 and 9

**** TODO other mouse maps
+ and navigating =describe-= and other docs
+ helpful-at-point
+ completion-at-point
+ highlight-symbol-at-point
+ counsel-dash-at-point

**** TODO config better functionality for =mwheelscroll=
+ signature =(mwheel-scroll EVENT &optional ARG)= defined in ~emacs/28/lisp/mwheel.el~
+ =mouse-wheel-scroll-amount-horizontal= parameterizes the event

**** TODO configure more functionality for the mouse :mouse:keys:
+ [ ] navigate to function at point
+ [ ] describe function at point
+ [ ] ~(kbd "<mouse-4>")~ linux mouse wheel scroll up
+ [ ] ~(kbd "<mouse-5>")~ linux mouse wheel scroll down
+ =<fringe>= and =<modeline>=

*** Wacom :wacom:

**** Mouse 10, 11, 12
Mouse 12 is for code folding. It is the easiest on the Wacom to combine with
modkeys while toggling to/from scrolling.

For Mouse 10/11/12, all of the following modkey combinations are easy to toggle while keeping the index finger near Mouse 13 and Wheel.

+ None
+ C
+ M
+ S
+ C-M
+ C-S
+ M-S (press both with thumb)
+ C-M-S (press both with thumb)

**** Mouse 13 and VWheel

Since I want to use the wheel to scroll anyways (without hitting modkeys), I am unsure of whether I want to remap it to HWheel in the Wacom drivers.

**** Mouse 14, 15

Mouse 14 & 15 are easy to use with the following modkeys.

+ None
+ M
+ S
+ M-S

Combinations with Control are a little more difficult with one hand.

**** Origami (Mouse 12)

**** Mode Hints (Mouse 14)

Mouse 14 is intended to give hints for keybindings.

- =M-<mouse-14>= calls to =which-key-show-major-mode= and should not require
  specific =config.el= behavior to be defined.
- =C-<mouse-14>= is intended to evoke mode-specific hydras, but requires these
  hydras to have been defined (see [[*HYDRAS][HYDRAS]])

*** Artist Mode :artist_mode:

[[https://www.emacswiki.org/emacs/ArtistMode][HOLY SHIT]]

** COMPLETION

*** Completion Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** COMPLETION
#+end_src

*** Completion Configs

#+begin_src emacs-lisp
;;** COMPLETION
(setq tab-always-indent 'complete)

;;*** Company

(map! "C-:" #'company-box-doc-manually
      "C-<tab>" #'company-yasnippet
      "C-M-;" #'company-yasnippet)

;;*** Ivy

;;*** Counsel
;; hopefully mindfuck myself into actually remembering 'counsel-imenu and 'counsel-swiper
(map! "C-s" 'counsel-imenu)
#+end_src

*** Completion prompts

*** Company :company:

For hotkeys, check the Doom [[file:~/.emacs.d/modules/completion/company/README.org::*Code completion][Company module]] docs (company boxes negate =C-h m=
and other help commands)

*** IVY :ivy:

Removed =-childframe= for now, as these are actual frames, kinda.

** UI

*** UI Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** UI

(package! diminish)
(package! auto-highlight-symbol)
(package! dimmer)
;; (package! beacon)

;;*** Alphapapa
(package! burly)
(package! bufler
  :recipe (:host github
           :repo "alphapapa/bufler.el"
           :files (:defaults (:exclude "helm-bufler.el" "bufler-workspace.el" "bufler-workspace-tabs.el"))))

(package! dogears
  :recipe (:host github
           :repo "alphapapa/dogears.el"
           :files (:defaults (:exclude "helm-dogears.el"))))
#+end_src

*** UI Configs

#+begin_src emacs-lisp
;;** UI

;;*** Diminish
;; should probably be loaded before :diminish directives
(use-package! diminish :ensure t)

;;*** Doom Theme
;; Pick a random theme from the ones I like.
(let* ((themes-ilike '(doom-one doom-dark+ doom-acario-dark doom-molokai modus-vivendi))
       (random-theme (nth (random (length themes-ilike)) themes-ilike)))
  (setq doom-theme random-theme))

;; NOTE just set modus-vivendi for now
(setq doom-theme 'modus-vivendi)

;; (setq doom-theme 'doom-acario-dark
;;   doom-acario-dark-brighter-comments nil
;;   doom-acario-dark-brighter-modeline t
;;   doom-acario-dark-comment-bg nil
;;   doom-acario-dark-padded-modeline 4)

;;*** Doom Dashboard

;;*** Font
;; (set-frame-font "Source Code Pro 12" nil t)
;; Source Code Pro not available in pGTK
(setq doom-font (font-spec :family "DejaVu Sans Mono" :size 14)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 14)
      doom-unicode-font (font-spec :family "JuliaMono" :size 14)
      doom-font-increment 2)

;; (unless (find-font doom-font)
;;   (message "couldn't find 'doom-font. using a default.")
;;   (setq doom-font (font-spec :family "Source Code Pro" :size 18)))

;; (unless (find-font doom-unicode-font)
;;   (message "couldn't find 'doom-unicode-font. using a default.")
;;   (setq doom-unicode-font (font-spec :family "Source Code Pro" :size 18)))

;;*** Ligatures
;; NOTE: ligatures is inactive (as of 2022-01-24)
(setq +ligatures-extras-in-modes
      '(not special-mode
            comint-mode
            eshell-mode
            term-mode
            vterm-mode
            python-mode))

;;*** Indent Guides
;;NOTE don't use them (they're taxing)

;;*** Window UI
;; NOTE: 2022-04-23 disable to determine if it's associated with (pgtk?) lag
(tooltip-mode -1)

(setq tooltip-delay 2
      tooltip-short-delay 0.5)

;;*** Copy/Paste
;; no, nope, NO, NOO, NO!
;; HELL NO! What in the hell smatter with y0ou?
(setq x-select-enable-primary nil
      ;; select-enable-primary nil
      ;; x-select-enable-clipboard t
      ;; select-enable clipboard t
      )

;; when did that change?...

;;*** Window Dividers
;; Dividers are too thin to grab if only 1px
;; ... but what the hell. why not?
(setq window-divider-default-right-width 1
      window-divider-default-bottom-width 1)

(map! ("M-<f10>" #'doom/window-enlargen))

;;*** Menu
(menu-bar-mode +2)

;;*** Highlighting

(use-package! auto-highlight-symbol
  ;; should autoload on bind
  :config (map! (:prefix "M-s h" :desc "auto-highlight-mode"
                 "A" #'dc/toggle-auto-highlight-symbol-mode)))

;; TODO try global-auto-highlight-symbol-mode
;; doom-specific
;; (add-hook 'doom-init-ui-hook #'global-auto-highlight-symbol-mode)

(defun dc/toggle-auto-highlight-symbol-mode ()
  "Toggle auto-highlight-symbol-mode"
  (interactive)
  (auto-highlight-symbol-mode 'toggle))

(defun dc/toggle-global-auto-highlight-symbol-mode ()
  "Toggle global-auto-highlight-symbol-mode"
  (interactive)
  (global-auto-highlight-symbol-mode 'toggle))

(map! :leader
      :prefix ("t" . "toggle")
      :desc "Toggle Global Auto Highlight" "H" #'dc/toggle-global-auto-highlight-symbol-mode)

;;*** Popups

(set-popup-rules!
  '(("^\\*lsp-ui-imenu" :side left :width 60
     :vslot -5 :slot 3
     :modeline nil :select t :quit t)
    ("^\\*Bufler" :side bottom :width 60
     :vslot -5 :slot -5
     :modeline nil :select t :quit t)))

;;*** Projectile

(setq projectile-project-search-path '(("/data/repo/" . 1)
                                       ;; ("/data/dev/" . 2) ;; trigger project depth
                                       ("/data/ecto/" . 3)))

;; projectile-auto-discover is nil
;; trigger project auto-discovery with projectile-discover-projects-in-search-path

;;*** Burly

(use-package! dash)
(use-package! burly
  :config (map! :leader
                (:prefix ("w" . "workspaces/windows")
                 (:prefix ("B" . "Burly bookmarks")
                  :desc "Restore windows/frames" "o" #'burly-open-bookmark
                  :desc "Open Burly URL" "O" #'burly-open-url
                  :desc "Bookmark Windows" "w" #'burly-bookmark-windows
                  :desc "Bookmark Frameset" "f" #'burly-bookmark-frames
                  :desc "Copy Buffer URL" "B" #'burly-kill-buffer-url
                  :desc "Copy Window URL" "F" #'burly-kill-frames-url
                  :desc "Copy Frameset URL" "W" #'burly-kill-windows-url))))

;;*** Bufler
(use-package! bufler
  :config (map! :map ctl-x-map
                :desc "Bufler List"
                "C-b" #'bufler-list))

;; (add-hook 'doom-init-ui-hook #'bufler-mode)

;;*** Dogears
(use-package! dogears
  :config (map! :prefix "M-g"
                "d" #'dogears-go
                "M-b" #'dogears-back
                "M-f" #'dogears-forward
                "M-d" #'dogears-list
                "M-D" #'dogears-sidebar))

(add-hook 'doom-init-ui-hook #'dogears-mode)

;;*** Modeline
(setq +modeline-height 31)

;;*** Which Key
(setq which-key-idle-delay 1.0)

;;*** Line Numbers
;; For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)

;;*** UI Alerts
(setq visible-bell t)

;;**** Beacon
;; (use-package! beacon
;;   :diminish beacon-mode
;;   :init (beacon-mode)
;;   :config (map! :leader
;;                 "tB" :desc "Beacon Mode"))

;;**** Dimmer
(use-package! dimmer
  :config (progn (setq dimmer-adjustment-mode :background
                       dimmer-fraction 0.05)
                 (map! :leader
                        "tD" :desc "Dimmer Mode"))

  ;;(dimmer-configure-company-box)
  (dimmer-configure-magit)
  (dimmer-configure-org)
  (dimmer-configure-hydra)
  (dimmer-configure-which-key)
  (dimmer-configure-posframe))

(add-hook 'doom-init-ui-hook
          #'dimmer-mode)
#+end_src

*** Menu Bar

[[https://www.emacswiki.org/emacs/MenuBar][Menu bar]] is for noobs. I am a noob.

i.e. CIDER alone has like 200 functions i need to learn

*** All The Icons

**** Dired

This is enabled via Doom's modules

*** Popups

+ Configuration
  + [[file:~/.emacs.doom/modules/ui/popup/autoload/settings.el::defun set-popup-rule! (predicate &rest plist][set-popup-rule!]] has an explanation of the API
  + [[file:~/.emacs.doom/modules/ui/popup/config.el::(set-popup-rules!][./popup/config.el]] has the invocations of popup rules for =+all= and =+default=

Popup Defaults (defined in =+popup-defaults=)

#+begin_example emacs-lisp
(:side bottom
 :height 0.16
 :width 40
 :quit t
 :select ignore
 :ttl 5)
#+end_example

+ slot/vslot :: controls popup positioning
  - for popups with identitical =:side= value
  - defaults to zero. higher values: further away from the center

+ Useful commands:
  + +popup/toggle :: =C-`= will toggle the popups
  + +popup/raise :: =C+~= will promote a popup into an actual window
  + +popup/other :: =C-x p= will flip through various popups like =ace-window=
  + +popup/restore :: will retrieve lost popups
  + +popup/diagnose :: will help you figure out why =bufler= closes all your windows.

*** Modeline

**** TODO Customize [[https://github.com/seagle0128/doom-modeline][doom-modeline]]

**** TODO configure :diminish on other modes/packages
+ [ ] how to do this on packages loaded by doom?

*** UI Alerts

**** Nav Flash

By default =+nav-flash/blink-cursor= is set to activate on
=doom-switch-window-hook=, but occasionally has periods where it doesn't
activeate. Not sure, but it appears that navigating through transient/magit
buffers will trigger this.

*** Window & Frame Management

Use burly for bookmarking loaded window configurations.

These are simply bookmarks and thus can be reached from the doom startup menu.

**** TODO after ui load, ensure that the default configured burly bookmarks exist

** EDITOR

*** Editor Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** EDITOR

(package! origami)
(package! centered-cursor-mode)
#+end_src

*** Editor Configs

#+begin_src emacs-lisp
;;** EDITOR

;;*** Auto Insert

;(auto-insert-mode)

;;*** Doom File Templates

;;*** Code Folding

(use-package! origami
  :config (map! :map origami-mode-map
                :prefix "C-c C-f"
                "C-f" #'origami-toggle-node
                "C-u" #'origami-open-node-recursively
                "C-c" #'origami-close-node-recursively
                "C-a C-r" #'origami-reset
                "C-a C-f" #'origami-close-all-nodes
                "C-a C-u" #'origami-open-all-nodes)

  (defvar ap/org-super-agenda-auto-show-groups
    '("Schedule" "Bills" "Priority A items" "Priority B items"))

  (defun ap/org-super-agenda-origami-fold-default ()
    "Fold certain groups by default in Org Super Agenda buffer."
    (forward-line 3)
    (cl-loop do (origami-forward-toggle-node (current-buffer) (point))
             while (origami-forward-fold-same-level (current-buffer) (point)))
    (--each ap/org-super-agenda-auto-show-groups
      (goto-char (point-min))
      (when (re-search-forward (rx-to-string `(seq bol " " ,it)) nil t)
        (origami-show-node (current-buffer) (point)))))

  ;; :hook ((org-agenda-mode . origami-mode)
         ;; (org-agenda-finalize . ap/org-super-agenda-origami-fold-default))

        )

(add-hook 'doom-init-ui-hook
          #'global-origami-mode)

;;*** centered-cursor-mode

(use-package! centered-cursor-mode      ;: defer t
  :config (map! :leader
                :desc "Toggle Centered Cursor" "t-" #'dc/toggle-global-centered-cursor-mode
                :desc "Toggle Centered Cursor" "t_" #'dc/toggle-centered-cursor-mode))

(defun dc/toggle-centered-cursor-mode ()
  "Toggle centered-cursor-mode"
  (interactive)
  (centered-cursor-mode 'toggle))

(defun dc/toggle-global-centered-cursor-mode ()
  "Toggle centered-cursor-mode"
  (interactive)
  (global-centered-cursor-mode 'toggle))

;; TODO try global-centered-cursor-mode by default
;; mostly to remind myself that it exists
;; (add-hook 'doom-init-ui-hook #'global-centered-cursor-mode)

;;*** Snippets

(setq dc/snippets (expand-file-name (concat doom-private-dir "snippets")))
(after! 'yasnippet
  (add-to-list 'yas-snippet-dirs 'dc/snippets)
  (message "loading dc/snippets")
  (yas-load-directory dc/snippets t))

(defun dc/toggle-objed-mode ()
  (interactive)
  (objed-mode 'toggle))

;; (map! ("<f10>" #'dc/toggle-objed-mode))
#+end_src

*** Auto Insert Mode

[[https://www.gnu.org/software/emacs/manual/html_mono/autotype.html#Autoinserting][Auto Insert Mode]] creates headers at the tops of files automatically. This can automatically insert =;; -*- file-local-variables: values -*-= in a header comment.

- auto-insert-alist :: a mapping of file types to auto-insertion behavior
- auto-insert-query :: controls whether to prompt user

*** Snippets

+ Yasnippets Docs
  - [[https://joaotavora.github.io/yasnippet/snippet-development.html][Writing Snippets]]
  - [[https://joaotavora.github.io/yasnippet/snippet-expansion.html][Explanding Snippets]]

+ Use =yas/describe-tables= to list snippets that match a modeset.
*** Objed

Objed mode is turned on.
** EMACS

*** Emacs Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** EMACS
#+end_src

*** Emacs Config

#+begin_src emacs-lisp
;;** EMACS

;;*** CONFIG 

;; https://labs.phundrak.com/phundrak/dotfiles/src/branch/master/org/config/emacs.org#Basic-Configuration-A-better-custom-variable-setter-56z4ni61lhj0
(defmacro csetq (&rest forms)
  "Bind each custom variable FORM to the value of its VAL.

FORMS is a list of pairs of values [FORM VAL].
`customize-set-variable' is called sequentially on each pairs
contained in FORMS. This means `csetq' has a similar behaviour as
`setq': each VAL expression are evaluated sequentially, i.e. the
first VAL is evaluated before the second, and so on. This means
the value of the first FORM can be used to set the second FORM.

The return value of `csetq' is the value of the last VAL.

\(fn [FORM VAL]...)"
  (declare (debug (&rest sexp form))
           (indent 1))
  ;; Check if we have an even number of arguments
  (when (= (mod (length forms) 2) 1)
    (signal 'wrong-number-of-arguments (list 'csetq (1+ (length forms)))))
  ;; Transform FORMS into a list of pairs (FORM . VALUE)
  (let (sexps)
    (while forms
      (let ((form  (pop forms))
            (value (pop forms)))
        (push `(customize-set-variable ',form ,value)
              sexps)))
    `(progn ,@(nreverse sexps))))

;;*** GPG

;; (setq auth-sources '("~/.authinfo" "~/.authinfo.gpg" "~/.netrc"))
;; (setq auth-sources (append `(,(concat (file-name-as-directory (getenv "DF_")) ".ectorepo.gpg")) auth-sources))

;;*** DIRED
(setq dired-omit-files "^.DS_Store\\'\\|^.project\\(?:ile\\)?\\'\\|^.\\(svn\\)\\'\\|^.ccls-cache\\'\\|\\(?:\\.js\\)?\\.meta\\'\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'")

(setq dired-dwim-target 'dired-dwim-target-recent)

;; Remove `.` and `..` from list of omitted file patterns
;; (so i can always run commands on the directory)
(map! (:map dired-mode-map
       ;; godammit don't close all the fucking dired buffers
       "q" #'find-name-dired
       :leader :desc "Close all direds" "Q" #'+dired/quit-all))

(defun +dired/quit-all ()
  "remap"
  (interactive)
  (message "don't close the buffers"))
#+end_src

*** AUTH

*** DIRED

Also `M-!` will run commands on the dir without parameterizing a subdir.

This is default & I'd rather adjust to it. In the future, I may address this by:

+ mapping a function to toggle the variable
+ map above =find-name-dired= within another interactive fn on another key that
  calls =map!=
+ simply confirm the =+dired/quit-all= invocation.

***** TODO ensure that the Q hotkey above stays in place.
+ or advise the dired function

** TERM

*** Term Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** TERM
#+end_src

*** Term Configs

#+begin_src emacs-lisp
;;** TERM
;; To install on guix with cmake (cc errors)
;; (setq vterm-module-cmake-args "-DCC=gcc")
#+end_src

** CHECKERS

*** Checkers Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** CHECKERS
#+end_src

*** Checkers Configs

#+begin_src emacs-lisp
;;** CHECKERS
#+end_src

** TOOLS

*** Tools Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** TOOLS

(package! xdg-paths)
(package! info-colors)
(package! tldr)
(package! magit-tbdiff)
(package! repo)
(package! firestarter)
(package! guix)
(package! journalctl-mode)
(package! crontab-mode)
(package! ssh-config-mode)
(package! x509-mode)
;; TODO ssh-agency
;; TODO ssh-tunnels
(package! salt-mode)

;; ok apparently there is an elf-mode :)
(package! elf-mode)

;; (package! rpm-spec-mode) ; apparently broken
(package! archive-rpm)
#+end_src


*** Tools Configs

#+begin_src emacs-lisp
;;** TOOLS

;;*** FIND/GREP
(setq counsel-grep-base-command "rg --color never %s %s")
;; (setq counsel-grep-base-command "grep -E -n -e %s %s")

;;*** INFO
(use-package! info-colors)

;;*** TLDR
(use-package! tldr
  :config (map! :leader "T" #'tldr))

;;*** EDIFF


;;*** GIT

;; control-f8, like facebook's conference
(map! "C-<f8>"
      :desc "Toggle Global Auto Highlight"
      #'git-timemachine-toggle)

;;*** MAGIT
;; magit-tbdiff: diff over ranges of commits
(use-package! magit-tbdiff)

;;*** FORGE


;;*** GITHUB


;;*** REPO
(use-package! repo)


;;*** SHELL
;; enables =./.dir-local.el= variables and file-local declarations to
;; config/control on-save shell tasks.[fn:haozeke]
(use-package! firestarter
  :init (firestarter-mode)
  :config (setq firestarter-default-type t))


;;*** TRAMP
(after! tramp
  (appendq! tramp-remote-path
            '("~/.guix-profile/bin" "~/.guix-profile/sbin"
              "/run/current-system/profile/bin"
              "/run/current-system/profile/sbin")))

;;*** GUIX
(use-package! guix
  :config (map! :leader "g" #'guix))

;;*** PKGBUILD (arch)
;; (use-package! pkgbuild-mode :mode "\\PKGBUILD")

;;*** CRON
(use-package! crontab-mode)

;;*** SSH
;; For =ssh-config-mode= add this file-local variable to configs
;; =# -*- mode: ssh-config -*-=

(use-package! ssh-config-mode)

;; TODO ssh-agency
;; TODO ssh-tunnels

;;*** X.509 certs
(use-package! x509-mode)
(appendq! auto-mode-alist
          '(("\\.pem$" . x509-mode)
            ("\\.cer$" . x509-mode)
            ("\\.der$" . x509-mode)
            ("\\.crt$" . x509-mode)
            ("\\.crl$" . x509-mode)))

;;*** DOCKER
(use-package! docker
  :config (setq docker-run-as-root t
                docker-image-run-arguments '("-i" "-t" "--rm")))

;; TODO assess autoloading -*- docker-image-name: "image-name" -*-
;; (put 'dockerfile-image-name 'safe-local-variable #'stringp)

;;**** LSP DOCKER
;; this requires pulling emacslisp/lsp-docker-full

;;*** SALTSTACK
;; NOTE i'm not really using salt
;; (use-package! salt-mode)

;;*** AST

;;*** ELF

;;*** RPM
;; (use-package! rpm-spec-mode) ; apparently broken
(use-package! archive-rpm)

#+end_src

*** SSH

+ [[https://github.com/jhgorrell/ssh-config-mode-el][ssh-config-mode]]
+ [[https://github.com/jobbflykt/x509-mode][x509-mode]]

*** Docker

**** [[https://github.com/emacs-lsp/lsp-docker][LSP Docker]] (requires pulling =emacslsp/lsp-docker-full= image)

This sets up LSP servers running on Docker containrs with more tightly
controlled configuration. e.g. when you want:
+ faster startup times
+ servers tuned a specific set of large projects
+ repeatable/declarative LSP configuration
+ to share cache or control its persistence for large projects

(not really sure how this works with branching or git worktrees)

**** Kubernetes
+ [ ] kubernetes.el
+ [ ] [[https://github.com/gruggiero/kubernetes-tramp][kubernetes-tramp]]
+ [ ] [[https://github.com/TxGVNN/emacs-k8s-mode][k8s-mode]] (kubernetes file support + snippets)

** LSP

*** Lsp Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** LSP
#+end_src

*** Lsp Configs

#+begin_src emacs-lisp
;;** LSP

;;*** LSP MODE

;;*** LSP UI
(setq lsp-ui-peek-list-width 25
      ;; lsp-ui-sideline--last-width

      ;; TODO ensure these are necessary/useful
      lsp-ui-doc-max-width 40 ;; 35 is default
      ;; lsp-ui-doc--inline-width

      lsp-ui-imenu-window-width 25)

(defun dc/toggle-lsp-ui-menu ()
  "If within lsp-ui-mode major, toggle the buffer closed and return to the originating buffer. if not
then toggle to the lsp-ui-menu buffer & activate mode if necessary. "
  (interactive)

  ;; TODO: fix && fully implement
  (if (string-match (regexp-quote "*lsp-ui-imenu") (buffer-name))
   (lsp-ui-imenu--kill)
   (progn (unless (bound-and-true-p lsp-ui-mode) (lsp-ui-mode))
           (lsp-ui-imenu))))

(map! "<f9>"
      :desc "Toggle LSP UI Menu"
      #'dc/toggle-lsp-ui-menu)
#+end_src

*** LSP Mode

*** LSP UI

**** TODO setup popup rules for LSP :lsp:
+ Left
  + [ ] =*lsp-ui-imenu*= on top of server connection details
  + [ ] =*lsp-log ... *= ideally overtake/switch with lsp server connection details
  + [ ] =*lsp session*=
+ Bottom
  + [ ] =lsp-performance*=


** OS

*** OS Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** OS
#+end_src

*** OS Configs

#+begin_src emacs-lisp
;;** OS
#+end_src

*** Terminal

Doom =tty= module is active, so =tty-setup-hook= should take care of enabling
=xterm-mouse-mode=.

**** TODO fix scroll wheel in tty (it works before =xterm-mouse-mode= loads)
- (tangle)

#+begin_src emacs-lisp :tangle no
(defun dc/xterm-toggle-mwheel-hook ()
    "Toggles the mouse maps for xterm-mouse-mode to setup the mouse wheel"

        )

;; (add-hook 'xterm-mouse-mode)
#+end_src

** ORG

*** Org Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** ORG

;; org data
(package! org-treeusage)

;; org bibliography
(package! org-ref)

;; org agenda
;; dependencies org-super-agenda => org-ql => org-sidebar
(package! org-super-agenda)
(package! org-ql)
(package! org-sidebar)

;; org roam
; so roam-ui gets latest roam (breaks doom update on main/ref)
;; (unpin! org-roam)
(package! org-roam-ui)

;; org misc
(package! org-krita
  :recipe (:host github
           :repo "lepisma/org-krita"
           :files ("resources" "resources" "*.el" "*.el")))

(package! org-drill)
#+end_src

*** Org Configs

#+begin_src emacs-lisp
;;** ORG

;;*** org-agenda packages


;;*** org-mode main config

(setq org-directory (getenv "ORG_DIRECTORY")
      org-calendars-directory (concat  (file-name-as-directory org-directory) "calendars")

      ;; Don't indent content in source blocks
      org-edit-src-content-indentation 0

      ;; org-src buffers replace current-window
      ;; NOTE: popup config is overriding this variableœ
      org-src-window-setup 'current-window

      ;; org-clock-idle-time 3
      )


;; doom-specific: Prevent over-eager dotfiles recompilation
(after! org
  (remove-hook 'org-mode-hook #'+literate-enable-recompile-h))


(defun dc/org-agenda-add-roam-dailies ()
  "add org-roam-dailies to org-agenda-files if it's not already contained"
  (let ((my-roam-dailies (file-name-as-directory
                          (concat org-directory "/roam/dailies"))))
    (unless (member my-roam-dailies org-agenda-files)
      (progn (message "appending org-roam-dailies to org-agenda-files")
             (append my-roam-dailies org-agenda-files)))))

;; (list
;;  (file-name-as-directory
;;   (concat  org-directory "/roam/dailies" )))

(after! org
  (setq org-log-done 'time
        org-support-shift-select t
        org-agenda-files '()))

;;*** org-agenda config

(use-package! org-super-agenda
  :init (setq org-super-agenda-groups
                '((:name "Today"
                   :time-grid t
                   :todo "Today")
                  (:habit t)
                  (:name "Due today"
                   :deadline today)
                  (:name "Overdue"
                   :deadline past)
                  (:name "Due soon"
                   :deadline future)
                  (:name "Important"
                   :priority "A")
                  (:priority<= "B"
                   :order 1)))
  :config (org-super-agenda-mode))

;;**** org-clock

;; Set auto-clockout to keep time tracking accurate.
(setq org-clock-auto-clockout-timer 300)
(org-clock-auto-clockout-insinuate)

;; Insinuate means that, unless a new clocking entry occurs
;; you will auto-clockout (for inactivity)
;; Refer to Orgmode Manual entry for details: https://orgmode.org/manual/Clocking-Work-Time.html#Clocking-Work-Time

;;*** org-roam

(defun dc/org-read-template-from-file (file)
  (if (file-exists-p file) (org-file-contents file)
    (format "* Template file %S not found" file)))

(setq dc/org-roam-templates-path
      (concat (file-name-as-directory doom-private-dir) "captures/roam/")
      dc/org-roam-dailies-template (concat dc/org-roam-templates-path "daily-default.org"))

;; encapsulate org-roam-directory within (file-truename ___) if using links
(setq org-roam-directory (concat (file-name-as-directory org-directory) "roam")
      org-roam-db-location (concat (file-name-as-directory (concat (getenv "HOME") "/.local/share/org-roam")) "org-roam.db")
      org-roam-file-extensions '("org")

      ;; Doom Defaults
      ;; org-roam-v2-ack t

      ;; the default gives titles that are too narrow (12)
      ;; org-roam-node--* sends the width of the then-current buffer
      ;; and the completing-read functionality is adjusted for ~80 chars
      ;;
      org-roam-node-display-template
      (format "${doom-hierarchy:36} %s %s"
              (propertize "${doom-type:*}" 'face 'font-lock-keyword-face)
              (propertize "${doom-tags:18}" 'face 'org-tag))

      org-roam-completion-everywhere nil

      ;; org-roam-extract-new-file-path doesn't work with a "slips/" path prepended to it
      org-roam-extract-new-file-path "${slug}-%<%Y%m%d%H%M%S>-.org"
      org-roam-dailies-directory "dailies/"
      org-roam-dailies-capture-templates
      `(("d" "default" entry
         ;; this should work, but seems unimplemented in org-roam
         ;; (file "./relative/path/from/roam/template.org")
         "%?"
         :target
         (file+head "%<%Y-%m-%d>.org"
                    ,(dc/org-read-template-from-file
                      dc/org-roam-dailies-template)
                    ;; ,(dc/org-roam-read-template-from-file
                    ;;   (concat (file-name-as-directory doom-private-dir)
                    ;;           "captures/roam/daily-default.org"))

                    )))

      org-roam-mode-section-functions #'(org-roam-backlinks-section
                                         org-roam-reflinks-section))

;; from https://org-roam.discourse.group/t/org-roam-major-redesign/1198/220
;;(setq org-roam-node-display-template "${title:80}  ${file:9} ${tags:20}")

(defun dc/org-roam-toggle-open-buffer-on-find-file ()
  "toggles the doom +org-roam-open-buffer-on-find-file variable"
  (interactive)
  (setq +org-roam-open-buffer-on-find-file
        (not +org-roam-open-buffer-on-find-file)))

(defconst dc/org-roam-capture-anki
  (string-join '("#+TITLE: ${title}"
                 "#+CATEGORY: anki"
                 "#+TAGS: "
                 ""
                 "* About"
                 ""
                 "* Cards"
                 ":PROPERTIES:"
                 ":ANKI_DECK: %^{DECK}"
                 ":ANKI_NOTE_TYPE: LaTeX"
                 ":END:") "\n"))

;; example file+head+olp
;; ("E" "example" plain "%?" :unnarrowed t
;;  :target (file+head+olp "${slug}.org"
;;                         "#+TITLE: ${title}\n\n"
;;                         ("h1" ("h2" "h2a") ("h3") "h4")))

;; TODO: setting tags: https://orgmode.org/manual/Setting-Tags.html
(setq org-tag-persistent-alist
      '((:startgroup . nil)
        ("VIS" . ?v)
        ("ISH" . ?!)
        ("GO" . ?G)
        ("FIN" . ?$) (:newline . nil)
        (:endgroup . nil) (:startgroup . nil)
        ("AUTO" . ?a)
        ("NET" . ?n)
        ("FS" . ?f)
        ("DO" . ?d)
        ("AU" . ?@)
        ("ID" . ?#)
        ("DF" . ?.) (:newline . nil)
        (:endgroup . nil) (:startgroup . nil)
        ("CODEX" . ?%)
        ("3D" . ?3)
        ("CAD" . ?C)
        ("WS" . ?w)
        ("ART" . ?A)
        ("MUS" . ?M)
        ("LEARN" . ?L)
        ("EDU" . ?E)
        ("HOME" . ?H)
        ("FAB" . ?F) (:newline . nil)
        (:endgroup . nil) (:startgroup . nil)
        ("MEET" . ?M)
        ("MSG" . ?m)
        ("EV" . ?V)
        ("CON" . ?c) (:newline . nil)
        (:endgroup . nil)))

;; TODO: create multiple templates for capturing to various outline paths
;; - =+olp= seems to only specify linear paths deeper into a tree
;; - this helps in avoiding creating in structure/length in files
;;   where it is not needed.
;; - it seems that a template is needed to generate files with consistent
;;   schema. though overusing such would be "doing it wrong".

;; TODO: setup header to prompt for inclusion of roam backlinks

;; TODO: context tags

(setq org-roam-capture-templates
      (cons '("d" "default" plain "%?" :unnarrowed t
             :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n"))

            `(("p" "projects" plain "%?" :unnarrowed t
               :target (file+head "projects/${slug}.org"
                                  "#+TITLE: ${title}\n#+DESCRIPTION: ${description}\n"))
              ("t" "topics" plain "%?" :unnarrowed t
               :target (file+head+olp "topics/${slug}.org"
                                      "#+TITLE: ${title}\n#+DESCRIPTION: ${description}\n#+TAGS:\n\n"
                                      ("Roam" "Docs" "Resources" "Issues")))

              ;; TODO: include metadata for linking to /data/ecto/.../abc.org
              ("c" "code" plain "%?" :unnarrowed t
               :target (file+head+olp "code/${slug}.org"
                                      "#+TITLE: ${title}\n#+DESCRIPTION: ${description}\n#+TAGS:\n\n"
                                      ("Roam" "Docs" "Resources" "Issues" "Projects")))

              ;; TODO: setup org-export for the cheatsheet
              ;; TODO: setup capture template (Ck) for adding a new keymap.
              ;;   olp: ("Keymaps" "${keymap name}")
              ("C" "cheatsheets" plain "%?" :unnarrowed t
               :target (file+head+olp "cheatsheets/${slug}.org"
                                      ,(dc/org-read-template-from-file
                                        (concat dc/org-roam-templates-path
                                                "cheatsheet.org"))))

              ;; for Anki/Editor format examples
              ;; - see https://github.com/louietan/anki-editor/examples.org
              ;; only notes that already exist in Anki should have ANKI_NOTE_ID
              ;; - see https://github.com/louietan/anki-editor/blob/master/anki-editor.el#161
              ("a" "anki" plain "%?" :unnarrowed t
               :target (file+head "anki/${slug}.org"
                                  ,dc/org-roam-capture-anki))
              ("D" "drills" plain "%?" :unnarrowed t
               :target (file+head "drills/${slug}.org"
                                  "#+TITLE: ${title}\n#+DESCRIPTION: ${description}\n#+TAGS:\n\n"))

              ;; TODO: validate whether this should be changed
              ;; - for org-roam-bibtex or org-ref
              ;; NOTE: slug needs to be a DOI in form:
              ;; - ${indicator}.${registrant}/${suffix}
              ("n" "noter (DOI)" plain "%?" :unnarrowed t
               :target (file+head "noter/${slug}.org"
                                  ,(string-join '("#+TITLE: ${title}"
                                                  "#+CATEGORY: slips"
                                                  "#+TAGS: ") "\n")))

              ("s" "slips" plain "%?" :unnarrowed t
               :target (file+head+olp "slips/%<%Y%m%d%H%M%S>-${slug}.org"
                                      ,(string-join '("#+TITLE: ${title}"
                                                      "#+CATEGORY: slips"
                                                      "#+TAGS: ") "\n")
                                      ("Roam" "Docs" "Resources" "Issues" "Projects"))))))

(defun dc/org-roam-insert-slug ()
  (interactive)
  (insert (org-roam-node-slug (org-roam-node-at-point))))

(defun dc/org-roam-get-slug ()
  (interactive)
  (org-roam-node-slug (org-roam-node-at-point)))

(use-package! org-roam-ui
  ;; :hook (...) ;; dont hook
  :after org-roam)

(setq org-roam-ui-sync-theme t
      org-roam-ui-follow t
      org-roam-ui-open-on-start nil
      org-roam-ui-update-on-save t)

;; DEFAULTS:
;; (setq org-roam-capture-templates '(("d" "default" plain "%?" :unnarrowed t
;;                                      :target (file+head "slips/%<%Y%m%d%H%M%S>-${slug}.org"
;;                                                         "#+title: ${title}"))))

;;**** org-roam-protocol
(use-package! org-roam-protocol
  :after org-protocol)

;;*** org-roam: daviwil

;;****  Project Templates
(defvar dw/org-roam-project-template
  '("p" "project" plain "** TODO %?"
    :target (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                           (string-join '("#+title: ${title}"
                                          "#+category: projects"
                                          "#+tags: project") "\n")
                           ("Tasks"))))

;; decide whether these functions are going to work for me (problems with roam subdirectories)
;; TODO (defun my/org-roam-filter-by-tag ...)
;; TODO (defun my/org-list-notes-by-tag ...)

;;**** Roam Node Insert
;; NOTE: (interactive "P") version of org-roam-node-insert
(defun dw/org-roam-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (push arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

;;**** Roam Capture Task: project captures
(defun dw/org-roam-capture-task ()
  (interactive)
  ;; TODO
  ;(add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)
  )

;;*** org-capture
;; TODO ... actually use capture templates
;;
;; (now that i have enough experience to know what data/files are worth generating)

;;**** org-capture protocols
;; TODO see ./reorg.org for protocol capture templates

;;*** org-refile
;; TODO: remove org-agenda-files and replace with:
;; - roam/topics & roam/projects
;; TODO: filter org roam dailies by filename's parsed dates
;; - filter to two months
(setq org-refile-targets
      '((org-agenda-files . (:maxlevel . 2))
        (("./todo.org" "./notes.org") . (:maxlevel . 3))
        (nil . (:maxlevel . 2)))

      org-refile-use-outline-path t
      org-refile-allow-creating-parent-nodes 'confirm
      org-refile-use-cache t)

(unless (boundp 'org-refile-cache-timer)
  (run-with-idle-timer 300 t (lambda ()
                               (org-refile-cache-clear)
                               (org-refile-get-targets)))
  (setq org-refile-cache-timer t))

;; TODO consider using =org-refile-target-verify-function
;; to filter subtrees marked "done" from being org-refile-targets
;; (source: mwfogleman/englehorn)

;;*** org-mode misc
;;**** org-krita
(use-package! org-krita
  :config
  (add-hook 'org-mode-hook 'org-krita-mode))

;; org-krita uses (call-process exe nil 0 nil args...)
(setq org-krita-executable "flatpak run org.kde.krita")
;; (defun dc/org-krita-get-flatpak-location ()
;;   (shell-command-to-string "flatpak info org.kde.krita --show-location"))


(defun org-krita-edit (path &optional full-mode)
  "Edit given PATH in krita canvasonly mode.
If FULL-MODE is not null, run full krita."
  (let ((kra-path (expand-file-name path)))
    (when (f-exists-p kra-path)
      (call-process-shell-command org-krita-executable nil 0 nil "--nosplash" kra-path)
      (org-krita-add-watcher kra-path))))

;; alter-f8 ... with art
(map! "M-<f8>" :desc "Insert Krita Image" #'org-krita-insert-new-image)

;; allow overriding the template with a project-local template
(defun org-krita-resource (file)
  "Return full path of a resource FILE."
  (expand-file-name
   file (file-name-as-directory (or (and (boundp 'my-org-krita-dir) my-org-krita-dir)
                                    (concat  org-krita-dir "resources")))))

;;**** org-drill

;; Config and flashcard info can be found at
;; https://gitlab.com//phillord/org-drill

(use-package! org-drill
  :after org
  :config (progn
            (setq org-drill-add-random-noise-to-intervals-p t)
            (setq org-drill-hint-separator "||")
            (setq org-drill-left-cloze-separator "<[")
            (setq org-drill-left-cloze-separator "]>")
            (setq org-drill-learn-fraction 0.25)))

;;**** org-treeusage
;;
;; this package helps analyze org headlines for cyclomatic complexity
;;
;; Can be customized according to:
;; https://github.com/mtekman/org-treeusage.el#customisation

(use-package! org-treeusage
  ;; :bind ("C-c d" . org-treeusage-mode)
  :config (setq org-treescope-overlay-header nil
                org-treeusage-overlay-usecolorbands nil))

;;*** org-mode keys

;; doom-specific: add keys to doom defaults
(map! (:map org-mode-map
       :leader
       :prefix ("nr" . "org-roam")
       "T" #'dc/org-roam-toggle-open-buffer-on-find-file

       ;; this is a nice way to explore a sparse space though
       "a" #'org-roam-node-random

       "D" #'org-roam-demote-entire-buffer
       "i" #'dw/org-roam-insert-immediate
       "I" #'org-roam-insert-node
       "#" #'org-id-get-create
       "4" #'dc/org-roam-get-slug
       "$" #'dc/org-roam-insert-slug
       "r" #'org-roam-refile
       "R" #'org-roam-link-replace-all
       "m" #'org-roam-buffer-toggle
       "M" #'org-roam-buffer-display-dedicated

       (:prefix ("o" . "node properties")
        "a" #'org-roam-alias-add
        "A" #'org-roam-alias-remove
        "t" #'org-roam-tag-add
        "T" #'org-roam-tag-remove
        "r" #'org-roam-ref-add
        "R" #'org-roam-ref-remove)))

;; doom-specific: doom maps these keys in two places, fix them both

(map! (:map org-mode-map
       :localleader
       :prefix ("m" . "org-roam")
       "T" #'dc/org-roam-toggle-open-buffer-on-find-file
       "a" #'org-roam-node-random
       "D" #'org-roam-demote-entire-buffer
       "i" #'dw/org-roam-insert-immediate
       "I" #'org-roam-insert-node

       "#" #'org-id-get-create
       "4" #'dc/org-roam-get-slug
       "$" #'dc/org-roam-insert-slug

       "r" #'org-roam-refile
       "R" #'org-roam-link-replace-all
       "m" #'org-roam-buffer-toggle
       "M" #'org-roam-buffer-display-dedicated

       (:prefix ("o" . "node properties")
        "a" #'org-roam-alias-add
        "A" #'org-roam-alias-remove
        "t" #'org-roam-tag-add
        "T" #'org-roam-tag-remove
        "r" #'org-roam-ref-add
        "R" #'org-roam-ref-remove)))

;; doom-specific: toggle narrow to subtree
(map! :map org-mode-map
      :leader
      :prefix ("t" . "toggle")
      :desc "Toggle Org Narrow" "T" #'org-toggle-narrow-to-subtree
      :desc "Toggle Org Treeusage" "U" #'org-treeusage-mode)
#+end_src

#+RESULTS:
: org-treeusage-mode


** LANG

*** Lang Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** LANG

(package! elisp-depmap
  :recipe (:host gitlab :repo "mtekman/elisp-depmap.el"))
(package! graphviz-dot-mode)
(package! dynamic-graphs)
(package! zprint-mode)
(package! julia-vterm)
(package! ob-julia-vterm)
(package! highlight-doxygen)
(package! arduino-cli-mode)
(package! openapi-yaml-mode
  :recipe (:host github :repo "esc-emacs/openapi-yaml-mode"))
(package! graphql)
(package! graphql-mode)
(package! ob-graphql)
(package! smiles-mode)
(package! ob-smiles)
#+end_src

*** Lang Configs

#+begin_src emacs-lisp
;;** LANG

;;*** ELISP
(use-package! elisp-depmap
  :bind (("C-c M-d" . elisp-depmap-graphviz-digraph)
         ("C-c M-g" . elisp-depmap-graphviz)
         ("C-c M-s" . elisp-depmap-makesummarytable))
  :config (setq elisp-depmap-exec-file (getenv "GRAPHVIZ_DOT")))

;;*** LATEX

;;*** CLOJURE
(add-hook 'clojure-mode-hook 'zprint-mode)
(add-hook 'clojurescript-mode-hook 'zprint-mode)

;;**** LSP (clojure)

;;**** CIDER
(add-hook 'cider-mode-hook #'clj-refactor-mode)
(setq org-babel-clojure-backend 'cider)

;;*** SCHEME

;;**** GEISER
;; see notes below on ipc from scheme to geiser (and v.v.)
(setq geiser-repl-autodoc-p nil)


;;**** GUILE

;;*** GUIX

;;*** JULIA

(let ((julia-depot-path
       (car (split-string (or (getenv "JULIA_DEPOT_PATH")
                              (concat (getenv "_LANG") "/.julia"))
                              path-separator))))
  (setq lsp-julia-package-dir nil
        lsp-julia-default-environment
        (concat (file-name-as-directory julia-depot-path)
                "environments/v1.7")))

;;**** LSP (julia)

;;*** XML

;;*** C++

;;**** DOXYGEN
(use-package! highlight-doxygen
  :hook ((c-mode c++-mode) . highlight-doxygen-mode))

;;**** FILES
(setq auto-mode-alist (append '(
                                ("\\.C$" . c++-mode)
                                ("\\.cc$" . c++-mode)
                                ("\\.cpp$" . c++-mode)
                                ("\\.inl$" . c++-mode)
                                ("\\.H$" . c++-mode)
                                ("\\.hh$" . c++-mode)
                                ("\\.hpp$" . c++-mode))
                              auto-mode-alist))

;;*** ARDUINO
;; (use-package! arduino-mode
;;   :hook ((arduino-mode . flycheck-arduino-setup)))
;; (add-hook 'arduino-mode-hook #'flycheck-arduino-setup)


;;*** SPICE

;;*** SMILES
(use-package! smiles-mode)
(use-package! ob-smiles)

;;*** OPEN API
(use-package! openapi-yaml-mode)

;;*** RESTCLIENT


;;*** GRAPHQL
(use-package! graphql)
(use-package! graphql-mode)
(use-package! ob-graphql)

;;*** GRAPHVIZ

;;**** graphviz-dot-mode
(use-package! graphviz-dot-mode)

;;**** dynamic-graphviz
(use-package! dynamic-graphs)
#+end_src

*** ELISP :elisp:

**** [[https://gitlab.com/mtekman/elisp-depmap.el][Elisp Depmap]]

Can be babel'd to generate graphviz pdf's of elisp libraries

*** LATEX :latex:

Apparently, [[https://mirror.aarnet.edu.au/pub/CTAN/systems/knuth/dist/tex/tex.web][the TeX source code]] was written in Pascal/TeX was literate
programming code written by Knuth in Pascal/TeX; via Hsin Haoyu[fn:hsinhaoyu]

*** CLOJURE :clojure:
**** LSP (Clojure)

*** CIDER :cider:

**** CIDER tips:
+ Discover cider commands with =C-c C-x x= from within CIDER.
+ An idea from SLIME, cider shortcuts can be accessed via =,= (comma)

**** TODO decide on the following CIDER variables :cider:
+ nrepl-hide-special-buffer t
+ cider-repl-clear-help-banner
+ cider-font-lock-dynamically nil
+ cider-popup-stacktraces nil
+ cider-repl-popup-stacktraces t
+ cider-repl-use-pretty-printing t
+ cider-repl-pop-to-buffer-on-connect t
+ cider-repl-display-help-banner nil
+ [[file:~/.emacs.d/modules/lang/clojure/config.el][Doom Defaults]]

*** SCHEME :scheme:
**** Geiser REPL

+ while scheme is running in a geiser REPL, DO NOT evaluate
  scheme in a buffer connected to that REPL.
  - it will poison the REPL state (causing it to freeze)
  - autodoc will reevaluate scheme, "breaking" the REPL
+ avoid geiser autodoc issues
  - instead use C-c C-d C-a to activate it on a per-repl basis

+ see [[https://emacs-guix.gitlab.io/website/manual/latest/emacs-guix.html#Development][emacs-guix docs (development)]] and [[https://www.nongnu.org/geiser/The-REPL.html#Autodoc-and-friends][autodoc and friends]]

*** XML :xml:

*** JULIA :julia:

Requires using a =:session= variable to track the results/evaluations of blocks.

*** PLANTUML :plantuml:

Plant UML is also supported by org-babel

*** GRAPHVIZ :graphviz:

Graphviz practically works [[https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html][out of the box]], which has an emacs lisp metaprogramming example. More examples here at [[https://github.com/dfeich/org-babel-examples/blob/master/graphviz/graphviz-babel.org][dfeich/org-babel-examples]].

#+begin_src dot :tangle no :file img/dot/dot_test.png :cmdline -Kdot -Tpng
digraph {
        rankdir=LR;
        splines=true;
        node [shape=box];

        A [label="A"]
        B [label="B"]
        C [label="C"]

        A -> B;
        B -> C;
        C -> A;
    }
#+end_src

#+RESULTS:
[[file:img/dot/dot_test.png]]

*** KDE :kde:

*** QT :qt:

*** C++ :cpp:

*** ARDUINO :arduino:

+ [[https://github.com/motform/arduino-cli-mode][Arduino CLI Mode]] cli only
+ [[https://github.com/stardiviner/arduino-mode/https://github.com/stardiviner/arduino-mode/][Arduino Mode]] offers flycheck & org-babel
  - It's gone :(

*** OPEN API :swagger:

**** TODO test openapi-yaml-mode (should apply to files starting with =openapi-yaml-*.yaml=) :testpackage:

*** RESTCLIENT :rest:

Doom =restclient= module includes [[https://github.com/pashky/restclient.el][restclient]] and [[https://github.com/iquiw/company-restclient][company-restclient]]. The =org=
module includes =ob-restclient=. These modes apply to =*.http= files.

**** Test =ob-restclient=:

#+begin_src restclient :tangle no
GET https://google.com/robots.txt
#+end_src

*** GRAPHQL :graphql:

+ [[https://github.com/vermiculus/graphql.el][graphql]]
+ [[https://github.com/davazp/graphql-mode][graphql-mode]]
+ [[https://github.com/jdormit/ob-graphql][ob-graphql]]

#+begin_src graphql :tangle no :url https://countries.trevorblades.com
query GetContinents {
  continent(code: "AF") {
    name
    code
  }
}
#+end_src

#+RESULTS:
: {
:   "data": {
:     "continent": {
:       "name": "Africa",
:       "code": "AF"
:     }
:   }
: }

*** SPICE :spice:

You'll need [[http://ngspice.sourceforge.net/ngspice-tutorial.html][ngspice]] and some components. The link is to the tutorial. Get this
working first, then have a look at the [[http://ngspice.sourceforge.net/docs/ngspice-31-manual.pdf][ngspice manual]]. RTFM.

+ Emacs Packages
  - [[https://github.com/stardiviner/spice-mode][spice-mode]]
  - [[https://github.com/stardiviner/ob-spice][ob-spice]]
    - upstream is also gone :(

**** Setup for =spice-mode=

***** Depdendencies

- gnuplot :: to render PNG's
- ngspice :: the simulator
- ??? :: A waveform viewer
  - It looks like =gtkviewer= would suffice, but =spicemode= depends on these
    and has 8000 lines. =ob-babel= mostly interacts with =ngspice= directly.

***** Configuration

+ System defaults are loaded from =/usr/share/spinit=
+ User defaults are loaded from =myproject/spiceinit=
 + if that's not found, then =~/.spiceinit=

Default template

#+begin_src spice :tangle .spice.template :eval no :comments none
*-*- mode: spice -*-
#+end_src

****** TODO make sense out of =spice-mode= (any software in this domain is part of simply the most unnecessarily complex ecosystem i have ever seen)

**** Test

This code, whether in this babel block or in its own file, should run.

+ For now, just hardcode the =$file= in the call to =gnuplot=

#+BEGIN_SRC spice :tangle no :comments none :results none
*Virtual Ground Test: opamp gain = 1000
vin in 0 dc 0V sin(0 0.1 100Hz)
r1 in inn 10k
r2 inn out 10k
EOpamp out 0 0 inn 1000
.tran 0.1ms 0.05s
.print tran v(in)
.meas tran vtest find v(in) at=0.04e-3
.end
.control
run
set gnuplot_terminal=png
*gnuplot $file v(in) v(out) v(inn)
gnuplot img/spice/spice-example v(in) v(out) v(inn)
.endc
#+END_SRC

**** TODO ob-spice: fix 'functions definition is void =org-babel-get-header='

*** SMILES :smiles:

This consists of =smiles-mode= and =ob-smiles= for rendering [[https://kitchingroup.cheme.cmu.edu/blog/2016/03/26/A-molecule-link-for-org-mode/][inline images of
chemical structures]]. Guide for [[https://www.polymergenome.org/guide/index.php?m=3][entering polymer subunits]].

#+BEGIN_SRC smiles :tangle no :file img/smiles/lsd.svg :results file
CCN(CC)C(=O)[C@H]1CN(C)[C@@H]2Cc3c[nH]c4cccc(C2=C1)c34
#+END_SRC

#+RESULTS:
[[file:img/smiles/lsd.svg]]

And dopamine.

#+BEGIN_SRC smiles :tangle no :file img/smiles/dopamine.svg :results file
NCCc1ccc(O)c(O)c1
#+END_SRC

#+RESULTS:
[[file:img/smiles/dopamine.svg]]

** BABEL

*** Babel Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** BABEL
#+end_src

*** Babel Configs

#+begin_src emacs-lisp
;;** BABEL

(use-package! ob-dot)
(org-babel-make-language-alias "julia" "julia-vterm")

;; this is insufficient as make-language-alias remaps a few other symbols
;; (defalias 'org-babel-execute:julia 'org-babel-execute:julia-vterm)
#+end_src

+ doom handles most of this stuff in [[file:~/.emacs.d/modules/lang/org/config.el::defun +org-init-babel-lazy-loader-h (][+org-init-babel-lazy-loader-h]]
  - =org-src-lang-modes= maps org-babel keys to modes (=-mode= suffix)
  - =org-babel-load-languages= describes language blocks types permitted to run
  - is the var =org-confirm-babel-evaluate= still in tact?

*** org-babel

*** ob-dot

*** ob-async

doesn't support session (see tecosaur's notes)

*** ob-translate

[[https://github.com/krisajenkins/ob-translate][ob-translate]]

For someone who owns a ton of original langauge and interlinear/bilingual books,
getting this into org-mode would be super helpfu. It's way more efficient than
manually writing down the translations and the results are searchable. Finally,
perhaps I can make meaningfull progress on that Español copy of Borges'
collections or my italian copy of Foucault's Pendulum -- both of which are far
superior when the etymological connections are left in tact.

**** ob-translate Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;*** ob-translate
(package! google-translate)
(package! ob-translate)
#+end_src

**** ob-translate Configs

Config google-translate.el ([[https://github.com/atykhonov/google-translate/issues/137][fix for TKK errors]])

#+begin_src emacs-lisp
;;*** ob-translate
(use-package! google-translate :demand t
  :init (require 'google-translate)
  :functions (my-google-translate-at-point google-translate--search-tkk)
  :custom (google-translate-backend-method 'curl)
  :config
  (defun google-translate--search-tkk ()
    "Search TKK."
    (list 430675 2721866130))
  (defun my-google-translate-at-point ()
    "reverse translate if prefix"
    (interactive)
    (if current-prefix-arg
        (google-translate-at-point)
      (google-translate-at-point-reverse)))
  :bind
  ;;("C-T". my-google-translate-at-point)
)
#+end_src

**** Test =ob-translate=:

Example:

#+BEGIN_SRC translate :src en :dest de,fr,ar,ja :results output :tangle no
This is a test.
#+END_SRC

#+RESULTS:
| de | Das ist ein Test.  |
| fr | C'est un test.     |
| ar | هذا اختبار.        |
| ja | これはテストです。 |

#+begin_src translate :src en :dest ja :results output :tangle no
Extra Sensory Perception
#+end_src

#+RESULTS:
: 超感覚的知覚

**** TODO emacs support for surfing etymology in wiktionary


** FIREWALL

After finding that a package was fetching unicorns with http requests (and
failing), i'd like to know a little more about what is going on here.

*** Firewall Package

#+begin_src emacs-lisp :tangle ./packages.el
;;** FIREWALL
#+end_src

*** Firewall Configs

#+begin_src emacs-lisp
;;** FIREWALL
#+end_src

** EMAIL

*** Email Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** EMAIL
#+end_src

*** Email Configs

#+begin_src emacs-lisp
;;** EMAIL
#+end_src

** APP

*** App Packages

#+begin_src emacs-lisp :tangle ./packages.el
;** APP
(package! anki-editor)
#+end_src

*** App Configs

#+begin_src emacs-lisp
;;** APP
(use-package anki-editor
  :after org-noter
  :config (setq anki-editor-create-decks 't))

(map! (:map org-mode-map
       :leader
       :prefix ("n@" . "Anki")
       :desc "Push Anki Notes" "p" 'anki-editor-push-notes
       :desc "Retry Anki Notes" "r" 'anki-editor-retry-failure-notes
       :desc "Insert Note" "n" 'anki-editor-insert-note
       (:prefix ("c" . "Cloze")
        :desc "Dwim" "d" 'anki-editor-cloze-dwim
        :desc "Region" "r" 'anki-editor-cloze-region)))
#+end_src

*** Packages to Evaluate (App)

**** IRC
+ [ ] [[https://github.com/jorgenschaefer/circe][circe]] an IRC client, complexity is "between rcirc and ERC"

** CONFIG

*** Config Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** CONFIG
(package! prism)
#+end_src

*** Config Configs

#+begin_src emacs-lisp
;;** CONFIG

;;*** Prism
(defun dc/prism-get-modus-colors ()
  "get modus colors for prism"
  (-map (lambda (c) (cdr (assoc (symbol-name c) modus-vivendi-theme-default-colors-alist)))
        '(red-fringe-bg blue green magenta cyan-alt-other blue red-alt
                        green-intense  blue-refine-bg yellow-intense)))

(defun dc/prism-get-doom-colors ()
  "get doom colors which will return nil and result in the 'emacs config from hell',
   which prevents lispy-mode (and many moooore) and ALSO deletes the results of the
   C-c ' blocks"
  (-map #'doom-color '(red teal green magenta cyan blue orange
                           dark-cyan violet yellow)))

;; i'm not sure whether this will help with performance
;; but it took forever to find
(defun dc/unless-org-src-fontification-activate (mode)
  "enable mode unless in an org-mode block"
  (unless (string-match (regexp-quote "*org-src-fontification:") (buffer-name))
    (apply mode '(+1))))

(use-package! prism
  :after modus-vivendi-theme
  :config (map! :leader :desc "Toggle Prism" "tP"
                (lambda () (interactive) (prism-mode 'toggle)))

  (add-hook! (emacs-lisp-mode clojure-mode clojurescript-mode common-lisp-mode scheme-mode)
             #'(lambda () (dc/unless-org-src-fontification-activate 'prism-mode))))

(add-hook! 'modus-themes-after-load-theme-hook
           :append
           #'(lambda ()

               (prism-set-colors
                 :lightens '(0 5 10)
                 :desaturations '(-2.5 0 2.5)
                 :colors (dc/prism-get-modus-colors))))

;; (dc/prism-get-modus-colors)
;; ("#ff8059"
;;  "#80b2f0"
;;  "#44bc44"
;;  "#feacd0"
;;  "#6ae4b9"
;;  "#2fafff"
;;  "#fba849"
;;  "#88bf99"
;;  "#9f80ff"
;;  "#f0dd60")

;;*** Rainbow Mode

(map! :leader :desc "Toggle Rainbow Mode" "tR"
      (lambda () (interactive) (rainbow-mode 'toggle)))

;; TODO fix to autoload rainbow-mode in doom theme files (setq
;; auto-minor-mode-alist (append '(("theme\\.el$" . rainbow-mode))
;; auto-minor-mode-alist))
#+end_src

*** Prism.el

*** Rainbow Mode

**** TODO customize doom [[file:~/.emacs.d/modules/tools/rgb/README.org::*Features][rainbow module]]

** HYDRAS

*** Hydras Packages

#+begin_src emacs-lisp :tangle ./packages.el
;;** HYDRAS
#+end_src

*** Hydras Configs

#+begin_src emacs-lisp
;;** HYDRAS

(load-file (expand-file-name
             (concat (file-name-as-directory (getenv "DOOMDIR"))
                     "scripts/hydras.el")))
#+end_src

* Footnotes

[fn:luca_doom] lccambiaghi [[https://github.com/lccambiaghi/.doom.d][doom config]]
[fn:luca_vanilla] lccambiaghi [[https://github.com/lccambiaghi/vanilla-emacs][emacs config]]
[fn:tecosaur] tecosaur [[https://github.com/tecosaur/emacs-config][emacs config]]
[fn:haozeke] haozeke [[https://github.com/HaoZeke/dotdoom][doom config]]
[fn:zzamboni] zzamboni [[https://gitlab.com/zzamboni/dot-doom][doom config]]
[fn:abo-abo] abo-abo [[https://github.com/abo-abo/oremacs][emacs config]]
[fn:geolessel] geolessel [[https://github.com/geolessel/dotfiles][emacs config]]
[fn:hsinhaoyu] hsinhaoyu [[https://github.com/hsinhaoyu/.emacs.d][emacs config]]
[fn:Brettm12345] Brettm12345 [[https://github.com/Brettm12345/doom-emacs-literate-config][doom config]]
[fn:mwfogleman] mwfogleman [[https://github.com/mwfogleman/.emacs.d][emacs config]]
[fn:tammymakesthings] tammymakesthings [[https://github.com/tammymakesthings/emacs_d][emacs config]]
[fn:hlissner] hlissner [[https://github.com/hlissner/doom-emacs-private][doom config]]
[fn:magnars] magnars [[https://github.com/magnars/.emacs.d][emacs config]]
[fn:sunnyhasija] sunnyhasija [[https://github.com/sunnyhasija/Academic-Doom-Emacs-Config][doom config]]
[fn:daedreth] daedreth [[https://github.com/daedreth/UncleDavesEmacs][emacs config]]
[fn:joseph8th] joseph8th [[https://github.com/joseph8th/literatemacs][emacs config]]
[fn:rasendubi] rasendubi [[https://github.com/rasendubi/dotfiles][dotfiles]]
[fn:TimQuelch] TimQuelch [[https://github.com/TimQuelch/emacs.d][emacs config]]
[fn:frap] frap [[https://github.com/frap/emacs-literate][emacs config]]
[fn:ubolonton] ubolonton [[https://github.com/ubolonton/.emacs.d][emacs config]]
[fn:iimacs] iimacs [[https://github.com/iimacs/.emacs.d][emacs config]] for [[https://github.com/kubemacs/kubemacs][kubemacs]]
[fn:sachac] sacha [[https://github.com/sachac/.emacs.d/][emacs config]]
[fn:irreal] irreal [[https://irreal.org/blog][blog]]
