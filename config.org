#+TITLE: Doom Emacs Config
#+AUTHOR: David Conner
#+DESCRIPTION: Inspired by the personal Doom Emacs config of DT, HaoZeke and others
#+PROPERTY: header-args :tangle ./config.el
#+STARTUP: content
#+OPTIONS: toc:nil

* About this file

This is an Emacs literate config, drawing inspiration from the following configs
below. It's definitely a work in progress and the build will probably break for
every other SHA. There's a list of much better configs in the org footnotes at
the end of the doc.

+ [[https://github.com/gilbertw1/emacs-literate-starter/][gilbertw1/emacs-literate-starter]]
+ [[https://github.com/HaoZeke/dotDoom][HaoZeke/dotDoom]]
+ And others

** Please excuse the mess

I'm spending a lot of time sampling the space of available options & developing
some familiarity with elisp. I've been through this before, and I don't want to
regret missing out on all the "unknown unknown" tools & workflow approaches. I'm
starting with a sparse sample of the entire space to avoid sticky global
minimums or to avoid totally biased exploration in a small subset of dimensions.
It's like "stochastic gradient descent" or building a sparse understanding of
the hyperplane for an infinite-dimensional problem (like a kernel method)...

I hope to move on to projects in other languages soon, but for now things are a
mess. The errant TODO statements will be thinned out soon enough.

** Approach to TOC

The TOC is loosely based on the Doom Emacs categories to make it simpler for
others to grok the structure and simpler for me to organize. The TOC headings
are generated with =toc-org= by specifying a heading including the tag:
=:TOC_3_gh:=.

** Tangle Output

Add the ~doom-emacs~ metadata comments to tangle exports:

#+BEGIN_SRC emacs-lisp
;; -*- no-byte-compile: t; lexical-binding: t; -*-
;;; ~/.doom.d/config.el
(setq user-full-name "David Conner"
      user-mail-address "noreply@te.xel.io")
#+END_SRC

When specified by =:tangle=, export the =(package! ...)= declarations to =packages.el=.

#+BEGIN_SRC emacs-lisp :tangle ./packages.el
;; -*- no-byte-compile: t; lexical-binding: t; -*-
;;; ~/.doom.d/packages.el
#+END_SRC

There may be other babel source blocks. Eventually, I would like include some
elisp code for reflecting on Doom Emacs (e.g. extracting a list of packages
added by Doom modules).

**** TODO [#B] place light semantic-versioning constraints on packages
+ ~(package asdfoo-bar :pin 1234)~
+
**** TODO performance adjustments
+ follow advice in [[file:~/.emacs.d/docs/faq.org::*How does Doom start up so quickly?][Doom FAQ]]
+ figureout what's keeping this in custom.el ~'(auth-source-save-behavior nil)~

* Table of Contents :TOC_3_gh:
- [[#about-this-file][About this file]]
  - [[#please-excuse-the-mess][Please excuse the mess]]
  - [[#approach-to-toc][Approach to TOC]]
  - [[#tangle-output][Tangle Output]]
- [[#configel][Config.el]]
  - [[#input][INPUT]]
    - [[#key-maps][Key Maps]]
    - [[#point-movement][Point Movement]]
    - [[#lispy][Lispy]]
    - [[#mouse][Mouse]]
    - [[#hydras][Hydras]]
  - [[#completion][COMPLETION]]
    - [[#completion-prompts][Completion prompts]]
    - [[#company][Company]]
    - [[#ivy][IVY]]
  - [[#ui][UI]]
    - [[#doom-theme][Doom Theme]]
    - [[#font][Font]]
    - [[#ligatures][Ligatures]]
    - [[#indent-guides][Indent Guides]]
    - [[#window-ui][Window UI]]
    - [[#menu-bar][Menu Bar]]
    - [[#highlighting][Highlighting]]
    - [[#startup][Startup]]
    - [[#all-the-icons][All The Icons]]
    - [[#treemacs][Treemacs]]
    - [[#which-key][which-key]]
    - [[#modeline][Modeline]]
    - [[#dimmer][Dimmer]]
    - [[#window--frame-management][Window & Frame Management]]
    - [[#sticky-windows][Sticky Windows]]
    - [[#misc][Misc]]
  - [[#editor][EDITOR]]
    - [[#origami-mode][Origami Mode]]
    - [[#centered-cursor-mode][Centered Cursor Mode]]
    - [[#snippets][Snippets]]
  - [[#emacs][EMACS]]
    - [[#dired][DIRED]]
  - [[#term][TERM]]
    - [[#shell][Shell]]
  - [[#checkers][CHECKERS]]
  - [[#tools][TOOLS]]
    - [[#info][Info]]
    - [[#diff-and-ediff][Diff and Ediff]]
    - [[#git][Git]]
    - [[#magit][Magit]]
    - [[#github][Github]]
    - [[#repo][Repo]]
    - [[#shell-1][Shell]]
    - [[#systemd][SystemD]]
    - [[#archlinux][Archlinux]]
    - [[#ken-kesey][Ken Kesey]]
    - [[#docker][Docker]]
    - [[#kubernetes][Kubernetes]]
    - [[#saltstack][SaltStack]]
    - [[#ast--metaprogramming][AST & Metaprogramming]]
    - [[#lsp-mode][LSP Mode]]
    - [[#lsp-ui][LSP UI]]
    - [[#emacs-packages][Emacs Packages]]
  - [[#os][OS]]
  - [[#org][ORG]]
    - [[#workflow][Workflow]]
    - [[#keys][Keys]]
    - [[#org-literate][Org Literate]]
    - [[#org-capture-and-refile][Org Capture and Refile]]
    - [[#org-agenda][Org Agenda]]
    - [[#org-clock][Org Clock]]
    - [[#org-super-agenda][Org Super Agenda]]
    - [[#org-query-language][Org Query Language]]
    - [[#org-sidebar][Org Sidebar]]
    - [[#source-blocks][Source Blocks]]
    - [[#org-treeusage][Org Treeusage]]
    - [[#org-drill][Org Drill]]
  - [[#lang][LANG]]
    - [[#elisp][ELISP]]
    - [[#latex][LATEX]]
    - [[#clojure][CLOJURE]]
    - [[#cider][CIDER]]
    - [[#julia][JULIA]]
    - [[#plantuml][PLANTUML]]
    - [[#graphviz][GRAPHVIZ]]
    - [[#kde][KDE]]
    - [[#qt][QT]]
    - [[#c][C++]]
    - [[#open-api][OPEN API]]
    - [[#restclient][RESTCLIENT]]
    - [[#graphql][GRAPHQL]]
  - [[#babel][BABEL]]
    - [[#org-babel-general-config][org-babel general config]]
    - [[#ob-async][ob-async]]
    - [[#ob-translate][ob-translate]]
  - [[#firewall][FIREWALL]]
  - [[#email][EMAIL]]
  - [[#app][APP]]
    - [[#packages-to-evaluate-app][Packages to Evaluate (App)]]
  - [[#config][CONFIG]]
    - [[#prismel][Prism.el]]
    - [[#rainbow-mode][Rainbow Mode]]
  - [[#hydras-1][HYDRAS]]
    - [[#edebug][edebug]]
    - [[#lispy-1][lispy]]
- [[#footnotes][Footnotes]]

* Config.el :doom:config:

:PROPERTIES:
:VISIBILITY: children
:END:

** INPUT

[[file:~/.emacs.d/core/core-keybinds.el][.emacs.d/core/core-keybinds.el]] makes for a very useful key & map! reference

*** Key Maps :kbd:

Most of these configs should be in their individual ~*-mode~ sections or under the *:kbd:* tag

#+begin_src emacs-lisp
;; Fixes problems with dead keys
(require 'iso-transl)
#+end_src

**** TODO remap ~org-forward-heading-same-level~
+ ~C-c C-b~ maps to ~org-backward-heading-same-level~
+ ~C-c C-f~ conflicts with code folding (which does nothing in org/babel)

*** Point Movement

*** Lispy

[[https://oremacs.com/lispy/][Keymap reference]] for [[https://github.com/abo-abo/lispy][Lispy]]. "[[https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-10.html#%25_sec_1.1.5][Always be evaling]]"

#+begin_src emacs-lisp
;; TODO clojurescript hook
;; TODO this may need to be set before lispy loads....
(setq lispy-compat '(cider edebug))
#+end_src

**** TODO fix auto-formatting so that lispy's ;;** outline sytnax works without auto-format fucking it up

**** TODO setup lispy to run automatically in cider-mode

*** Mouse :mouse:

see [[ergoemacs.org/emacs/emacs_mouse_wheel_config.html][Xah Lee's post on Mouse Config]] for more info on the how & why

**** Misc Mouse Configs

#+begin_src emacs-lisp
(setq mouse-wheel-progressive-speed nil
      mouse-wheel-scroll-amount '(8)
      mouse-drag-and-drop-region t)
#+end_src

**** Mouse 8 and 9
:PROPERTIES:
:ID:       692e65d2-2cd3-4564-bd75-26dcc2b84251
:END:

#+begin_src emacs-lisp
;; TODO: misc subdir & project-level shortcuts (died,project)

;; for now, simply back/forward buffer ;; TODO: change =forward= to bufler or emacs-tab bar?
(map! "S-<mouse-8>" 'previous-buffer)
;; TODO something else: (map! "S-<mouse-9>" 'next-buffer)

(map! "<mouse-8>" '+fold/toggle)
(map! "<mouse-9> " 'er/expand-region)
(map! "S-<mouse-9> " 'er/contract-region)

;; (map! "<mouse-8>" 'counsel-grep-or-swiper)
;; (map! "<mouse-9> " 'swiper-all-buffer-p)
;; (map! "C-<mouse-8>" '+ivy/switch-buffer)
;; (map! "C-<mouse-9>" '+ivy/switch-workspace-buffer)
(map! "C-S-<mouse-8>" 'projectile-find-file)
(map! "C-S-<mouse-9>" 'projectile-grep)

;; (map! "C-M-<mouse-8>" '+workspace/switch-right)
;; (map! "C-M-<mouse-9>" '+workspace/switch-right)
;; (map! "M-S-<mouse-8>" 'doom/save-session) ;; TODO: remap
;; (map! "M-S-<mouse-9>" 'doom/load-session) ;; TODO: remap
;; (map! "M-<mouse-8>" 'better-jumper-jump-backward)

;; TODO: something else (map! "M-<mouse-9>" 'better-jumper-jump-backward)
#+end_src

**** Wacom

***** Mouse 10, 11, 12
Mouse 12 is for code folding. It is the easiest on the Wacom to combine with
modkeys while toggling to/from scrolling.

For Mouse 10/11/12, all of the following modkey combinations are easy to toggle while keeping the index finger near Mouse 13 and Wheel.

+ None
+ C
+ M
+ S
+ C-M
+ C-S
+ M-S (press both with thumb)
+ C-M-S (press both with thumb)

***** Mouse 13 and VWheel

Since I want to use the wheel to scroll anyways (without hitting modkeys), I am unsure of whether I want to remap it to HWheel in the Wacom drivers.

***** Mouse 14, 15

Mouse 14 & 15 are easy to use with the following modkeys.

+ None
+ M
+ S
+ M-S

Combinations with Control are a little more difficult with one hand.

***** Origami (Mouse 12)

#+begin_src emacs-lisp
(map! "<mouse-12>" 'origami-toggle-node)
(map! "C-<mouse-12>" 'origami-open-node-recursively)
(map! "C-S-<mouse-12>" 'origami-close-node-recursively)

(map! "M-<mouse-12>" 'origami-forward-fold)
(map! "S-<mouse-12>" 'origami-backward-fold-same-level)
(map! "M-S-<mouse-12>" 'origami-forward-fold-same-level)

(map! "C-M-<mouse-12>" 'origami-close-all-nodes)
(map! "C-M-S-<mouse-12>" 'origami-open-all-nodes)

;; (map! "M-S-<mouse-12>" 'origami-show-only-node)

#+end_src

**** TODO other mouse maps
+ and navigating =describe-= and other docs
+ helpful-at-point
+ completion-at-point
+ highlight-symbol-at-point
+ counsel-dash-at-point

**** TODO config better functionality for =mwheelscroll=
+ signature =(mwheel-scroll EVENT &optional ARG)= defined in ~emacs/28/lisp/mwheel.el~
+ =mouse-wheel-scroll-amount-horizontal= parameterizes the event

**** TODO configure more functionality for the mouse :mouse:keys:
+ [ ] navigate to function at point
+ [ ] describe function at point
+ [ ] ~(kbd "<mouse-4>")~ linux mouse wheel scroll up
+ [ ] ~(kbd "<mouse-5>")~ linux mouse wheel scroll down
+ =<fringe>= and =<modeline>=
*** Hydras :hydras:

#+begin_src emacs-lisp

#+end_src


** COMPLETION

*** Completion prompts

*** Company :company:

For hotkeys, check the Doom [[file:~/.emacs.d/modules/completion/company/README.org::*Code completion][Company module]] docs (company boxes negate =C-h m=
and other help commands)

**** TODO check luca: delay/prefix, disable tab? and yasnippets in company

**** [[https://github.com/osv/company-web][company-web]] and [[https://github.com/smihica/emmet-mode][emmet-mode]]

These are included with Doom, but worth linking in.

*** IVY :ivy:

Removed =-childframe= for now, as these are actual frames, kinda.

**** HOLD configure views to use with ~ivy-switch-view~ (or just use bufler?)

** UI

*** Doom Theme

Pick a random theme from the ones I like.

#+begin_src emacs-lisp
(let* ((themes-ilike '(doom-one doom-dark+ doom-acario-dark))
       (random-theme (nth (random (length themes-ilike)) themes-ilike)))
  (setq doom-theme random-theme))

(setq doom-one-brighter-modeline t)

;; (setq doom-theme 'doom-acario-dark
;;   doom-acario-dark-brighter-comments nil
;;   doom-acario-dark-brighter-modeline t
;;   doom-acario-dark-comment-bg nil
;;   doom-acario-dark-padded-modeline 4)
#+end_src

*** Font

#+begin_src emacs-lisp
;; (set-frame-font "Source Code Pro 12" nil t)
(setq doom-font (font-spec :family "DejaVu Sans Mono" :size 14)
      doom-unicode-font (font-spec :family "DejaVu Sans Mono" :size 14)
      doom-variable-pitch-font (font-spec :family "DejaVu Sans" :size 14)
      doom-font-increment 1)

(unless (find-font doom-font)
  (message "couldn't find 'doom-font. using a default.")
  (setq doom-font (font-spec :family "Source Code Pro" :size 18)))

(unless (find-font doom-unicode-font)
  (message "couldn't find 'doom-unicode-font. using a default.")
  (setq doom-unicode-font (font-spec :family "Source Code Pro" :size 18)))

#+end_src

+ config =doom-variable-pitch-font=?
+ config =ivy-posframe-font=

*** Ligatures

Disable extra ligatures in a few modes [fn:luca_doom]

#+BEGIN_SRC emacs-lisp
(setq +ligatures-extras-in-modes
      '(not special-mode comint-mode eshell-mode term-mode vterm-mode python-mode))
#+END_SRC

*** Indent Guides

The =indent-guides= doom module conflicts with =prism=, so i removed indent
guides. These must be applied to each buffer in this order:

1. prism
2. indent-guide

*** Window UI

Dividers are too thin to grab if only 1px

#+begin_src emacs-lisp
(setq window-divider-default-right-width 1)
(setq window-divider-default-bottom-width 1)
#+end_src

*** Menu Bar

[[https://www.emacswiki.org/emacs/MenuBar][Menu bar]] is for noobs. I am a noob.

#+begin_src emacs-lisp
(menu-bar-mode +2)
#+end_src

i.e. CIDER alone has like 200 functions i need to learn

*** Highlighting

#+begin_src emacs-lisp :tangle ./packages.el
(package! auto-highlight-symbol)
#+end_src

#+begin_src emacs-lisp
(use-package! auto-highlight-symbol
  ;; should autoload on bind
  :config (map! (:prefix "M-s h" :desc "auto-highlight-mode"
                 "A" (lambda () (interactive) (auto-highlight-symbol-mode 'toggle)))))
#+end_src

*** Startup

*** All The Icons

#+begin_src emacs-lisp :tangle ./packages.el
(package! treemacs-all-the-icons)
#+end_src

#+begin_src emacs-lisp
(use-package! treemacs-all-the-icons)

(add-hook 'doom-init-ui-hook
          (lambda () (treemacs-load-theme "Default")))
#+End_src

*** Treemacs

Set a default width for treemacs & disable filewatch unless needed

#+begin_src emacs-lisp
(after! treemacs
  (setq treemacs-width 24)
  (treemacs-filewatch-mode -1))
#+end_src

Key bindings ([[https://github.com/sei40kr/spacemacs.d/blob/master/treemacs-custom.el][treemacs example in spacemacs]])

#+begin_src emacs-lisp
(map! :map treemacs-mode-map :after treemacs
      (:prefix "o" :desc "Tags" "t" 'treemacs-toggle-node-prefer-tag-visit))
#+end_src

It is possible to make the Treemacs window draggable by default with ~(setq
treemacs--width-is-locked nil)~ on startup, which i finally figured out
(immediately before finally discovering ~(balance-windows)~ which maximizes the
treemacs width if it's not fixed.....)

*** which-key

shorten the delay (from luca)

#+BEGIN_SRC emacs-lisp
(after! which-key
    (setq which-key-idle-delay 0.5))
#+END_SRC

*** Modeline

customize [[https://github.com/seagle0128/doom-modeline][doom-modeline]]

#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  ;; doom-modeline workspace-name has conflicts with bufler tab-bar
  (setq doom-modeline-workspace-name nil

        doom-modeline-height 24
        ;; doom-modeline-project-detection 'ffip,'projectile,'projectile
        doom-modeline-minor-modes t))
#+END_SRC

*** Dimmer

#+begin_src emacs-lisp :tangle ./packages.el
(package! dimmer)
#+end_src

#+begin_src emacs-lisp
(use-package! dimmer
  :config (setq dimmer-adjustment-mode :background
                dimmer-fraction 0.4)

  (dimmer-configure-company-box)
  (dimmer-configure-magit)
  (dimmer-configure-org)
  (dimmer-configure-hydra)
  (dimmer-configure-which-key)
  (dimmer-configure-posframe))
#+end_src

*** Window & Frame Management

Use burly for bookmarking loaded window configurations. This should perhaps be a
=+burly= feature on the =workspace= module, with perhaps alternate ~(:when (feature! :ui workspace +burly))~
workspaces

#+begin_src emacs-lisp :tangle ./packages.el
(package! burly)
#+end_src

These are simply bookmarks and thus can be reached from the doom startup menu.

#+begin_src emacs-lisp
(use-package! burly
  :config (map! :leader
                (:prefix ("w" . "workspaces/windows")
                  (:prefix ("B" . "Burly bookmarks")
                   :desc "Restore windows/frames" "o" #'burly-open-bookmark
                   :desc "Open Burly URL" "O" #'burly-open-url
                   :desc "Bookmark Windows" "w" #'burly-bookmark-windows
                   :desc "Bookmark Frameset" "f" #'burly-bookmark-frames
                   :desc "Copy Buffer URL" "B" #'burly-kill-buffer-url
                   :desc "Copy Window URL" "F" #'burly-kill-frames-url
                   :desc "Copy Frameset URL" "W" #'burly-kill-windows-url))))
#+end_src

*** Sticky Windows

#+begin_src emacs-lisp :tangle ./packages.el
;;(package! )
#+end_src

*** Misc

This determines the style of line numbers. For relative line numbers, set this
to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

** EDITOR

*** Origami Mode

Origami mode

#+begin_src emacs-lisp :tangle ./packages.el
(package! origami)
#+end_src

#+begin_src emacs-lisp
(use-package! origami
  :config (map! :map origami-mode-map
                :prefix "C-c C-f"
                "C-f" #'origami-toggle-node
                "C-u" #'origami-open-node-recursively
                "C-c" #'origami-close-node-recursively
                "C-a C-r" #'origami-reset
                "C-a C-f" #'origami-close-all-nodes
                "C-a C-u" #'origami-open-all-nodes)

  (defvar ap/org-super-agenda-auto-show-groups
    '("Schedule" "Bills" "Priority A items" "Priority B items"))

  (defun ap/org-super-agenda-origami-fold-default ()
    "Fold certain groups by default in Org Super Agenda buffer."
    (forward-line 3)
    (cl-loop do (origami-forward-toggle-node (current-buffer) (point))
             while (origami-forward-fold-same-level (current-buffer) (point)))
    (--each ap/org-super-agenda-auto-show-groups
      (goto-char (point-min))
      (when (re-search-forward (rx-to-string `(seq bol " " ,it)) nil t)
        (origami-show-node (current-buffer) (point)))))

  ;; :hook ((org-agenda-mode . origami-mode)
         ;; (org-agenda-finalize . ap/org-super-agenda-origami-fold-default))

        )

(add-hook 'doom-init-ui-hook
          (lambda ()
            (global-origami-mode +1)))
#+end_src

*** Centered Cursor Mode

Scroll lock can emulate this.

#+begin_src emacs-lisp :tangle ./packages.el
(package! centered-cursor-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! centered-cursor-mode ;: defer t
  :config (map! :leader :desc "Toggle Centered Cursor"
                "t-" (λ! () (interactive) (centered-cursor-mode 'toggle))))
#+end_src

*** Snippets

**** Yasnippet-snippets

#+begin_src emacs-lisp
(setq dc/snippets (expand-file-name (concat doom-private-dir "snippets")))

(eval-after-load 'yasnippet
  (lambda ()
    (add-to-list 'yas-snippet-dirs 'dc/snippets)
    (message "loading snippets")
    (message dc/snippets)
    (yas-load-directory dc/snippets t)))
#+end_src

** EMACS

*** DIRED

Remove `.` and `..` from list of omitted file patterns (so i can always run
commands on the directory). Also `M-!` will run commands on the dir without
parameterizing a subdir.

#+begin_src emacs-lisp
(setq dired-omit-files "^.DS_Store\\'\\|^.project\\(?:ile\\)?\\'\\|^.\\(svn\\|git\\)\\'\\|^.ccls-cache\\'\\|\\(?:\\.js\\)?\\.meta\\'\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'")
#+end_src

** TERM

*** Shell

**** Explicit Shell

This fixes an issue i'm having where ~/bin/fish~ is the default shell no matter
how i've configured things with ~chsh~. This was done by Garuda/Arch either
before or after the doom/emacs install.

#+begin_src emacs-lisp
(setq explicit-shell-file-name "/bin/zsh")
#+end_src

**** TODO check luca shell configs


** CHECKERS

Syntax & Spellcheck

** TOOLS

*** Info

#+begin_src emacs-lisp :tangle ./packages.el
(package! info-colors)
#+end_src

test with emacs manual =C-h R=

#+begin_src emacs-lisp
(use-package! info-colors)
#+end_src

**** TODO test =info-colors= or modularize

*** Diff and Ediff

*** Git


*** Magit
[[https://github.com/magit/magit-tbdiff][magit-tbdiff]] show diffs over ranges of commits

#+begin_src emacs-lisp :tangle ./packages.el
(package! magit-tbdiff)
#+end_src

#+begin_src emacs-lisp
(use-package! magit-tbdiff)
#+end_src

**** TODO: configure =magit-repository-directories=
+ see =hlissner= config & others


*** Github

*** Repo

#+begin_src emacs-lisp :tangle ./packages.el
(package! repo)
#+end_src

#+begin_src emacs-lisp
(use-package! repo)
#+end_src

*** Shell

[[https://depp.brause.cc/firestarter][Firestarter]] enables =./.dir-local.el= variables and file-local declarations to
config/control on-save shell tasks.[fn:haozeke]

#+begin_src emacs-lisp :tangle ./packages.el
(package! firestarter)
#+end_src

#+begin_src emacs-lisp
(use-package! firestarter
  :init (firestarter-mode)
  :config (setq firestarter-default-type t))
#+end_src

*** SystemD

#+begin_src emacs-lisp :tangle ./packages.el
(package! journalctl-mode)
#+end_src

*** Archlinux

**** PKGBUILD Mode

#+BEGIN_SRC emacs-lisp :tangle ./packages.el
(package! pkgbuild-mode
  :recipe (:host github :repo "juergenhoetzel/pkgbuild-mode"))
#+END_SRC

#+begin_src emacs-lisp
(use-package! pkgbuild-mode :mode "\\PKGBUILD")
#+end_src

**** Crontab Mode

[[0    Link: https://github.com/emacs-pe/crontab-mode][crontab-mode]]

#+begin_src emacs-lisp :tangle ./packages.el
(package! crontab-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! crontab-mode)
#+end_src

***** TODO test crontab-mode :testpackage:

*** Ken Kesey

[[https://github.com/jhgorrell/ssh-config-mode-el][ssh-config-mode]] and [[https://github.com/jobbflykt/x509-mode][x509-mode]]

#+begin_src emacs-lisp :tangle ./packages.el
(package! ssh-config-mode)
(package! x509-mode)
;; TODO ssh-agency
;; TODO ssh-tunnels
#+end_src

For =ssh-config-mode= add this file-local variable to configs =# -*- mode:
ssh-config -*-=

#+begin_src emacs-lisp
(use-package! ssh-config-mode)
(use-package! x509-mode)
#+end_src

+ [ ] ssh-agency
+ [ ] ssh-tunnels (hmmmm)

*** Docker

To use what the Doom module configures, install =docker=, =docker-compose= and =docker-machine=. for

The [[file:~/.emacs.d/modules/tools/docker/config.el][doom config file]] looks a little sparse, so the config must be partially
composed in and installed in other module config.el files. Actually, now that I
checked, most of the =docker*= features are being loaded into emacs with some
(e.g. docker-compose-*) being loaded as needed.

#+begin_src emacs-lisp
(use-package! docker
  :config (setq docker-run-as-root t
                docker-image-run-arguments '("-i" "-t" "--rm")))

;; so the ## -*- docker-image-name: "image-name" -*- directive works with ~dockerfile-mode~
;; TODO assess
(put 'dockerfile-image-name 'safe-local-variable #'stringp)
#+end_src

**** [[https://github.com/emacs-lsp/lsp-docker][LSP Docker]] (requires pulling =emacslsp/lsp-docker-full= image)

This sets up LSP servers running on Docker containrs with more tightly
controlled configuration. e.g. when you want:
+ faster startup times
+ servers tuned a specific set of large projects
+ repeatable/declarative LSP configuration
+ to share cache or control its persistence for large projects

(not really sure how this works with branching or git worktrees)

***** TODO configure lsp-docker
+ probably when i'm working on Krita

**** TODO setup =C-c d= as a "devops" prefix, remap =C-c d d= to =docker=

*** Kubernetes

**** TODO setup kubernetes.el :doom:devops:packages:
**** TODO evaluate ~kubectl~ package :doom:devops:packages:

**** Kubernetes
+ [ ] kubernetes.el
+ [ ] [[https://github.com/gruggiero/kubernetes-tramp][kubernetes-tramp]]
+ [ ] [[https://github.com/TxGVNN/emacs-k8s-mode][k8s-mode]] (kubernetes file support + snippets)

*** SaltStack

From HaoZeke[fn:haozeke]

#+begin_src emacs-lisp :tangle ./packages.el
(package! salt-mode)
#+end_src

#+begin_src emacs-lisp
(use-package salt-mode)
#+end_src

**** TODO Need to check config


*** AST & Metaprogramming

+ [ ] [[https://github.com/ubolonton/emacs-tree-sitter][tree-sitter-mode]]
  - install packages
  - add config
  - document setup
  - consider setting up as a module
+ [ ] [[https://github.com/countvajhula/symex.el][symex]]

**** TODO configure bindings & control when these are activated

*** LSP Mode

**** TODO work out lsp/eldoc interactions


**** TODO setup =lsp-origami=

*** LSP UI

#+begin_src emacs-lisp
(setq lsp-ui-peek-list-width 25
      ;; lsp-ui-sideline--last-width

      ;; TODO ensure these are necessary/useful
      lsp-ui-doc-max-width 35 ;; 35 is default
      ;; lsp-ui-doc--inline-width

      lsp-ui-imenu-window-width 25)
#+end_src

*** Emacs Packages

#+begin_src emacs-lisp :tangle ./packages.el

#+end_src


** OS

** ORG

Additonal org-mode packages:

#+begin_src emacs-lisp :tangle ./packages.el
(package! org-treeusage)
(package! org-drill)

;; dependencies org-super-agenda => org-ql => org-sidebar
(package! org-super-agenda)
(package! org-ql)
(package! org-sidebar)
#+end_src

General Org Mode configs:

#+begin_src emacs-lisp
(setq org-directory (getenv "ORG_DIRECTORY")
      +org-capture-journal-file "/data/org/journal.org")
#+end_src

*** Workflow

*** Keys :kbdmaps:

**** TODO remap ~org-forward-heading-same-level~
+ ~C-c C-b~ maps to ~org-backward-heading-same-level~
+ ~C-c C-f~ conflicts with code folding (which does nothing in org/babel)

*** Org Literate

prevent over-eager dotfiles recompilation =from HaoZeke=

#+BEGIN_SRC emacs-lisp
(after! org
  (remove-hook 'after-save-hook #'+literate|recompile-maybe))
#+END_SRC


*** Org Capture and Refile

#+begin_src emacs-lisp
(setq org-refile-targets
      '((org-agenda-files . (:maxlevel . 3))
        (nil . (:maxlevel . 3)))

      org-refile-use-outline-path t
      org-refile-allow-creating-parent-nodes 'confirm
      org-refile-use-cache t)

(unless (boundp 'org-refile-cache-timer)
  (run-with-idle-timer 300 t (lambda ()
                               (org-refile-cache-clear)
                               (org-refile-get-targets)))
  (setq org-refile-cache-timer t))

;; TODO consider using =org-refile-target-verify-function
;; to filter subtrees marked "done" from being org-refile-targets
;; (source: mwfogleman/englehorn)
#+end_src

*** Org Agenda

+ protesilaos & hsinhaoyu have pretty comprehensive configs

*** Org Clock

Set auto-clockout to keep time tracking accurate. Refer to [[https://orgmode.org/manual/Clocking-Work-Time.html#Clocking-Work-Time][Orgmode Manual entry]] for details.

#+begin_src emacs-lisp
(setq org-clock-auto-clockout-timer 300
      ;; org-clock-idle-time 3
        )
(org-clock-auto-clockout-insinuate)
#+end_src

*** Org Super Agenda

+ review mwfogleman's config

#+begin_src emacs-lisp
(use-package! org-super-agenda
  :init (setq org-super-agenda-groups
                '((:name "Today"
                   :time-grid t
                   :todo "Today")
                  (:habit t)
                  (:name "Due today"
                   :deadline today)
                  (:name "Overdue"
                   :deadline past)
                  (:name "Due soon"
                   :deadline future)
                  (:name "Important"
                   :priority "A")
                  (:priority<= "B"
                   :order 1)
                  ))
  :config (org-super-agenda-mode))
#+end_src

*** Org Query Language

#+begin_src emacs-lisp

#+end_src

*** Org Sidebar

#+begin_src emacs-lisp

#+end_src

*** Source Blocks

Don't indent content in source blocks

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

*** Org Treeusage

#+begin_src emacs-lisp
(use-package! org-treeusage
  :bind ("C-c d" . org-treeusage-mode)
  :config (setq org-treescope-overlay-header nil
                org-treeusage-overlay-usecolorbands nil))
#+end_src

Can be customized according to the info at the [[https://github.com/mtekman/org-treeusage.el#customisation][Org Treeusage github]].

*** Org Drill

Config and flashcard info can be found at [[https://gitlab.com//phillord/org-drill    ][phillord/org-drill]]


#+begin_src emacs-lisp
(use-package! org-drill
  :after org
  :config (progn
            (setq org-drill-add-random-noise-to-intervals-p t)
            (setq org-drill-hint-separator "||")
            (setq org-drill-left-cloze-separator "<[")
            (setq org-drill-left-cloze-separator "]>")
            (setq org-drill-learn-fraction 0.25))
  )
#+end_src

** LANG

*** ELISP :elisp:


*** LATEX :latex:

(From Hsin Haoyu) Apparently, [[https://mirror.aarnet.edu.au/pub/CTAN/systems/knuth/dist/tex/tex.web][the TeX source code]] was written in Pascal/TeX was
literate programming code written by Knuth in Pascal/TeX.

*** CLOJURE :clojure:

+ [[https://github.com/pesterhazy/zprint-mode.el][zprint-mode]]

#+begin_src emacs-lisp :tangle ./packages.el
(package! zprint-mode)
#+end_src

#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook 'zprint-mode)
(add-hook 'clojurescript-mode-hook 'zprint-mode)

#+end_src

**** LSP :lsp:


*** CIDER

#+begin_src emacs-lisp :tangle ./packages.el
(add-hook 'cider-mode-hook #'clj-refactor-mode)

(setq org-babel-clojure-backend 'cider)
#+end_src

**** CIDER tips:
+ Discover cider commands with =C-c C-x x= from within CIDER.
+ An idea from SLIME, cider shortcuts can be accessed via =,= (comma)

**** TODO decide on the following CIDER variables :cider:
+ nrepl-hide-special-buffer t
+ cider-repl-clear-help-banner
+ cider-font-lock-dynamically nil
+ cider-popup-stacktraces nil
+ cider-repl-popup-stacktraces t
+ cider-repl-use-pretty-printing t
+ cider-repl-pop-to-buffer-on-connect t
+ cider-repl-display-help-banner nil
+ [[file:~/.emacs.d/modules/lang/clojure/config.el][Doom Defaults]]

*** JULIA :julia:

Requires using a =:session= variable to track the results/evaluations of blocks

#+begin_src emacs-lisp :tangle ./packages.el
(package! julia-vterm)
(package! ob-julia-vterm)
#+end_src

#+begin_src emacs-lisp
;; TODO: (after! org & julia-vterm?
;;;         ...)
;; (after! org-babel ... )
;; (org-babel-make-language-alias "julia" "julia-vterm")
#+end_src

*** PLANTUML :plantuml:

Plant UML is also supported by org-babel

*** GRAPHVIZ :graphviz:

Graphviz practically works [[https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html][out of the box]]

#+begin_src dot :tangle no :file img/dot/dot_test.png  :cmdline -Kdot -Tpng
digraph {
        rankdir=LR;
        splines=true;
        node [shape=box];

        A [label="A"]
        B [label="B"]
        C [label="C"]

        A -> B;
        B -> C;
        C -> A;
}
#+end_src


#+RESULTS:
[[file:img/dot/dot_test.png]]

*** KDE :kde:

*** QT :qt:

*** C++ :cpp:

**** Doxygen Support

#+begin_src emacs-lisp :tangle ./packages.el
(package! highlight-doxygen)
#+end_src

Doxygen for c/cpp [fn:haozeke]

#+begin_src emacs-lisp
(use-package! highlight-doxygen
  :hook ((c-mode c++-mode) . highlight-doxygen-mode))
#+end_src

**** More Files
#+begin_src emacs-lisp
;; from HaoZeke/dotdoom
(setq auto-mode-alist (append '(
                                ("\\.C$" . c++-mode)
                                ("\\.cc$" . c++-mode)
                                ("\\.cpp$" . c++-mode)
                                ("\\.inl$" . c++-mode)
                                ("\\.H$" . c++-mode)
                                ("\\.hh$" . c++-mode)
                                ("\\.hpp$" . c++-mode)
                                )
                              auto-mode-alist))
#+end_src

*** OPEN API :swagger:

#+begin_src emacs-lisp :tangle ./packages.el
(package! openapi-yaml-mode
  :recipe (:host github :repo "esc-emacs/openapi-yaml-mode"))
#+end_src

#+begin_src emacs-lisp
(use-package! openapi-yaml-mode)
#+end_src

**** TODO test openapi-yaml-mode (should apply to files starting with =openapi-yaml-*.yaml=) :testpackage:

*** RESTCLIENT :rest:

Doom =restclient= module includes [[https://github.com/pashky/restclient.el][restclient]] and [[https://github.com/iquiw/company-restclient][company-restclient]]. The =org=
module includes =ob-restclient=. These modes apply to =*.http= files.

**** Test =ob-restclient=:

#+begin_src restclient :tangle no
GET https://google.com/robots.txt
#+end_src

*** GRAPHQL :graphql:

+ [[https://github.com/vermiculus/graphql.el][graphql]]
+ [[https://github.com/davazp/graphql-mode][graphql-mode]]
+ [[https://github.com/jdormit/ob-graphql][ob-graphql]]

#+begin_src emacs-lisp :tangle ./packages.el
(package! graphql)
(package! graphql-mode)
(package! ob-graphql)
#+end_src

#+begin_src emacs-lisp
(use-package! graphql)
(use-package! graphql-mode)
(use-package ob-graphql)
#+end_src

**** Test =ob-graphql=:

#+begin_src graphql :tangle no :url https://countries.trevorblades.com
query GetContinents {
  continent(code: "AF") {
    name
    code
  }
}
#+end_src

** BABEL

+ doom handles most of this stuff in [[file:~/.emacs.d/modules/lang/org/config.el::defun +org-init-babel-lazy-loader-h (][+org-init-babel-lazy-loader-h]]
  - =org-src-lang-modes= maps org-babel keys to modes (=-mode= suffix)
  - =org-babel-load-languages= describes language blocks types permitted to run
  - is the var =org-confirm-babel-evaluate= still in tact?

*** org-babel general config
Load general org-babel config after defining languages

#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-babel-load-languages
               '((julia-vterm . t)
                 (clojure . t)
                 (dot . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages
   org-babel-load-languages))
;;(defalias 'org-babel-execute:julia 'org-babel-execute:julia-vterm)
#+end_src

**** TODO ensure the above is necessary with =+org-init-babel-lazy-loader-h=

*** ob-async

doesn't support session (see tecosaur's notes)

*** [[https://github.com/krisajenkins/ob-translate][ob-translate]]

For someone who owns a ton of original langauge and interlinear/bilingual books,
getting this into org-mode would be super helpfu. It's way more efficient than
manually writing down the translations and the results are searchable. Finally,
perhaps I can make meaningfull progress on that Español copy of Borges'
collections or my italian copy of Foucault's Pendulum -- both of which are far
superior when the etymological connections are left in tact.

#+begin_src emacs-lisp :tangle ./packages.el
(package! google-translate)
(package! ob-translate)
#+end_src

Config google-translate.el ([[https://github.com/atykhonov/google-translate/issues/137][fix for TKK errors]])

#+begin_src emacs-lisp
(use-package! google-translate :demand t
  :init (require 'google-translate)
  :functions (my-google-translate-at-point google-translate--search-tkk)
  :custom (google-translate-backend-method 'curl)
  :config
  (defun google-translate--search-tkk ()
    "Search TKK."
    (list 430675 2721866130))
  (defun my-google-translate-at-point ()
    "reverse translate if prefix"
    (interactive)
    (if current-prefix-arg
        (google-translate-at-point)
      (google-translate-at-point-reverse)))
  :bind
  ;;("C-T". my-google-translate-at-point)
)
#+end_src

**** Test =ob-translate=:

Example:

#+BEGIN_SRC translate :src en :dest de,fr,ar,ja :results output :tangle no
This is a test.
#+END_SRC

#+RESULTS:
| de | Das ist ein Test.  |
| fr | C'est un test.     |
| ar | هذا اختبار.        |
| ja | これはテストです。 |

#+begin_src translate :src en :dest ja :results output :tangle no
Extra Sensory Perception
#+end_src

#+RESULTS:
: 超感覚的知覚

**** TODO emacs support for surfing etymology in wiktionary


** FIREWALL

After finding that a package was fetching unicorns with http requests (and
failing), i'd like to know a little more about what is going on here.

#+begin_src emacs-lisp :tangle ./packages.el

#+end_src


** EMAIL

** APP

*** Packages to Evaluate (App)

**** IRC
+ [ ] [[https://github.com/jorgenschaefer/circe][circe]] an IRC client, complexity is "between rcirc and ERC"

** CONFIG

Misc config goes here

*** Prism.el

#+begin_src emacs-lisp :tangle ./packages.el
(package! prism)
#+end_src

Use doom colors for theme and toggle with =:leader tP=

#+begin_src emacs-lisp
(use-package! prism
  :hook ((emacs-lisp-mode . prism-mode)
         (clojure-mode . prism-mode)
         (clojurescript-mode . prism-mode))
  :config (map! :leader :desc "Toggle Prism"
                "tP" (lambda () (interactive) (prism-mode 'toggle)))

  (prism-set-colors :lightens '(0 5 10) :desaturations '(-2.5 0 2.5)
    :colors (-map #'doom-color
                  '(red teal green magenta cyan blue orange dark-cyan violet yellow)))
                  ;; options: red orange green teal yellow blue dark blue magenta violet cyan dark cyan
  )
#+end_src

*** Rainbow Mode

#+begin_src emacs-lisp
(map! :leader :desc "Toggle Rainbow Mode"
      "tR" (lambda () (interactive) (rainbow-mode 'toggle)))


;; TODO fix to autoload rainbow-mode in doom theme files
;; (setq auto-minor-mode-alist (append '(("theme\\.el$" . rainbow-mode))
                                    ;; auto-minor-mode-alist))
#+end_src

**** TODO customize doom [[file:~/.emacs.d/modules/tools/rgb/README.org::*Features][rainbow module]]

** HYDRAS

These were made using pretty awesome snippet on creating hydras from an org
table (via [[https://sachachua.com/blog/2021/04/emacs-making-a-hydra-cheatsheet-for-lispy/][sacha chua]])[fn:sachac]

*** edebug

These options control printing in edebug-mode:
+ edebug-print-length
+ edebug-print-level

These functions are mostly grouped according to the order they are introduced in
the emacs manual, except for the modes.

#+name: hydra-edebug-bindings
| key     | function                          | column  |
|---------+-----------------------------------+---------|
| g       | edebug-go-mode                    | Modes   |
| SPC     | edebug-step-mode                  | Modes   |
| t       | edebug-trace-mode                 | Modes   |
| c       | edebug-continue-mode              | Modes   |
| G       | edebug-Go-nonstop-mode            | Modes   |
| T       | edebug-Trace-fast-mode            | Modes   |
| C       | edebug-Continue-fast-mode         | Modes   |
| n       | edebug-next-mode                  | Modes   |
| I       | edebug-set-initial-mode           | Modes   |
| S       | edebug-stop                       | Jumping |
| h       | edebug-goto-here                  | Jumping |
| f       | edebug-forward-sexp               | Jumping |
| o       | edebug-step-out                   | Jumping |
| i       | edebug-step-in                    | Jumping |
| ?       | edebug-help                       | Misc    |
| Q       | edebug-top-level-nonstop          | Misc    |
| r       | edebug-previous-result            | Misc    |
| d       | edebug-pop-to-backtrace           | Misc    |
| =       | edebug-display-freq-count         | Misc    |
| b       | edebug-set-breakpoint             | Breaks  |
| B       | edebug-next-breakpoint            | Breaks  |
| u       | edebug-unset-breakpoint           | Breaks  |
| U       | edebug-unset-breakpoints          | Breaks  |
| D       | edebug-toggle-disable-breakpoint  | Breaks  |
| x       | edebug-set-conditional-breakpoint | Breaks  |
| X       | edebug-set-global-break-condition | Breaks  |
| v       | edebug-view-outside               | Views   |
| P       | edebug-bounce-point               | Views   |
| w       | edebug-where                      | Views   |
| W       | edebug-toggle-save-windows        | Views   |
| e       | edebug-eval-expression            | Eval    |
| C-x C-e | edebug-eval-last-sexp             | Eval    |
| E       | edebug-visit-eval-list            | Eval    |
| C-j     | edebug-eval-print-last-sexp       | Eval    |
| C-c C-u | edebug-update-eval-list           | Eval    |
| C-c C-d | edebug-delete-eval-item           | Eval    |
| C-c C-w | edebug-where                      | Eval    |
|---------+-----------------------------------+---------|

These functions are mentioned in the emacs manual, but not mapped in the hydra
(for simplicity).

#+name: hydra-edebug-other-bindings
| key     | function                          | column  |
|---------+-----------------------------------+---------|
| a       | abort-recursive-edit              | Misc    |
| q       | top-level                         | Misc    |
| M-:     | eval-expression                   | Eval    |
|---------+-----------------------------------+---------|

#+BEGIN_SRC emacs-lisp :var bindings=hydra-edebug-bindings :colnames yes :results silent

(eval
 (append
  '(defhydra dchydra/edebug-cheat-sheet (:hint nil :foreign-keys run)
     ("C-<mouse-14>" nil "Exit" :exit t))
  (cl-loop for x in bindings
           unless (string= "" (elt x 2))
           collect
           (list (car x)
                 (intern (elt x 1))
                 ;; edebug-(?:eval-)?\(.+)
                 (when (string-match "edebug-\\(.+\\)"
                                     (elt x 1))
                   (match-string 1 (elt x 1)))
                 :column
                 (elt x 2)))))

(with-eval-after-load "edebug"
  (define-key edebug-mode-map (kbd "C-<mouse-14>") 'dchydra/edebug-cheat-sheet/body))

#+END_SRC

*** lispy

Lispy functions of note.

#+name: hydra-lispy-bindings
   | key | function                      | column   |
   |-----+-------------------------------+----------|
   | <   | lispy-barf                    |          |
   | A   | lispy-beginning-of-defun      |          |
   | j   | lispy-down                    |          |
   | Z   | lispy-edebug-stop             |          |
   | B   | lispy-ediff-regions           |          |
   | G   | lispy-goto-local              |          |
   | h   | lispy-left                    |          |
   | N   | lispy-narrow                  |          |
   | y   | lispy-occur                   |          |
   | o   | lispy-other-mode              |          |
   | J   | lispy-outline-next            |          |
   | K   | lispy-outline-prev            |          |
   | P   | lispy-paste                   |          |
   | l   | lispy-right                   |          |
   | I   | lispy-shifttab                |          |
   | >   | lispy-slurp                   |          |
   | SPC | lispy-space                   |          |
   | xB  | lispy-store-region-and-buffer |          |
   | u   | lispy-undo                    |          |
   | k   | lispy-up                      |          |
   | v   | lispy-view                    |          |
   | V   | lispy-visit                   |          |
   | W   | lispy-widen                   |          |
   | D   | pop-tag-mark                  |          |
   | x   | see                           |          |
   | L   | unbound                       |          |
   | U   | unbound                       |          |
   | X   | unbound                       |          |
   | Y   | unbound                       |          |
   | H   | lispy-ace-symbol-replace      | Edit     |
   | c   | lispy-clone                   | Edit     |
   | C   | lispy-convolute               | Edit     |
   | n   | lispy-new-copy                | Edit     |
   | O   | lispy-oneline                 | Edit     |
   | r   | lispy-raise                   | Edit     |
   | R   | lispy-raise-some              | Edit     |
   | \   | lispy-splice                  | Edit     |
   | S   | lispy-stringify               | Edit     |
   | i   | lispy-tab                     | Edit     |
   | xj  | lispy-debug-step-in           | Eval     |
   | xe  | lispy-edebug                  | Eval     |
   | xT  | lispy-ert                     | Eval     |
   | e   | lispy-eval                    | Eval     |
   | E   | lispy-eval-and-insert         | Eval     |
   | xr  | lispy-eval-and-replace        | Eval     |
   | p   | lispy-eval-other-window       | Eval     |
   | q   | lispy-ace-paren               | Move     |
   | z   | lispy-knight                  | Move     |
   | s   | lispy-move-down               | Move     |
   | w   | lispy-move-up                 | Move     |
   | t   | lispy-teleport                | Move     |
   | Q   | lispy-ace-char                | Nav      |
   | -   | lispy-ace-subword             | Nav      |
   | a   | lispy-ace-symbol              | Nav      |
   | b   | lispy-back                    | Nav      |
   | d   | lispy-different               | Nav      |
   | f   | lispy-flow                    | Nav      |
   | F   | lispy-follow                  | Nav      |
   | g   | lispy-goto                    | Nav      |
   | xb  | lispy-bind-variable           | Refactor |
   | xf  | lispy-flatten                 | Refactor |
   | xc  | lispy-to-cond                 | Refactor |
   | xd  | lispy-to-defun                | Refactor |
   | xi  | lispy-to-ifs                  | Refactor |
   | xl  | lispy-to-lambda               | Refactor |
   | xu  | lispy-unbind-variable         | Refactor |
   | M   | lispy-multiline               | Other    |
   | xh  | lispy-describe                | Other    |
   | m   | lispy-mark-list               | Other    |
   |-----+-------------------------------+----------|

#+BEGIN_SRC emacs-lisp :var bindings=hydra-lispy-bindings :colnames yes :results silent
(eval
 (append
  '(defhydra dchydra/lispy-cheat-sheet (:hint nil :foreign-keys run)
     ("C-<mouse-14>" nil "Exit" :exit t))
  (cl-loop for x in bindings
           unless (string= "" (elt x 2))
           collect
           (list (car x)
                 (intern (elt x 1))
                 (when (string-match "lispy-\\(?:eval-\\)?\\(.+\\)"
                                     (elt x 1))
                   (match-string 1 (elt x 1)))
                 :column
                 (elt x 2)))))

(with-eval-after-load "lispy"
  (define-key lispy-mode-map (kbd "C-<mouse-14>") 'dchydra/lispy-cheat-sheet/body))

#+END_SRC



* Footnotes

[fn:luca_doom] lccambiaghi [[https://github.com/lccambiaghi/.doom.d][doom config]]
[fn:luca_vanilla] lccambiaghi [[https://github.com/lccambiaghi/vanilla-emacs][emacs config]]
[fn:tecosaur] tecosaur [[https://github.com/tecosaur/emacs-config][emacs config]]
[fn:haozeke] haozeke [[https://github.com/HaoZeke/dotdoom][doom config]]
[fn:zzamboni] zzamboni [[https://gitlab.com/zzamboni/dot-doom][doom config]]
[fn:abo-abo] abo-abo [[https://github.com/abo-abo/oremacs][emacs config]]
[fn:geolessel] geolessel [[https://github.com/geolessel/dotfiles][emacs config]]
[fn:hsinhaoyu] hsinhaoyu [[https://github.com/hsinhaoyu/.emacs.d][emacs config]]
[fn:Brettm12345] Brettm12345 [[https://github.com/Brettm12345/doom-emacs-literate-config][doom config]]
[fn:mwfogleman] mwfogleman [[https://github.com/mwfogleman/.emacs.d][emacs config]]
[fn:tammymakesthings] tammymakesthings [[https://github.com/tammymakesthings/emacs_d][emacs config]]
[fn:hlissner] hlissner [[https://github.com/hlissner/doom-emacs-private][doom config]]
[fn:magnars] magnars [[https://github.com/magnars/.emacs.d][emacs config]]
[fn:sunnyhasija] sunnyhasija [[https://github.com/sunnyhasija/Academic-Doom-Emacs-Config][doom config]]
[fn:daedreth] daedreth [[https://github.com/daedreth/UncleDavesEmacs][emacs config]]
[fn:joseph8th] joseph8th [[https://github.com/joseph8th/literatemacs][emacs config]]
[fn:rasendubi] rasendubi [[https://github.com/rasendubi/dotfiles][dotfiles]]
[fn:TimQuelch] TimQuelch [[https://github.com/TimQuelch/emacs.d][emacs config]]
[fn:frap] frap [[https://github.com/frap/emacs-literate][emacs config]]
[fn:ubolonton] ubolonton [[https://github.com/ubolonton/.emacs.d][emacs config]]
[fn:iimacs] iimacs [[https://github.com/iimacs/.emacs.d][emacs config]] for [[https://github.com/kubemacs/kubemacs][kubemacs]]
[fn:sachac] sacha [[https://github.com/sachac/.emacs.d/][emacs config]]
[fn:irreal] irreal [[https://irreal.org/blog][blog]]
