#+TITLE: Doom Emacs Config
#+AUTHOR: David Conner
#+DESCRIPTION: Inspired by the personal Doom Emacs config of DT, HaoZeke and others
#+PROPERTY: header-args :tangle yes :results none
#+STARTUP: showeverything
#+OPTIONS: toc:nil

* Configuration :doom:
:PROPERTIES:
:VISIBILITY: children
:END:

** About this file
This is an Emacs literate configuration template, based on
[[https://github.com/gilbertw1/emacs-literate-starter/][gilbertw1/emacs-literate-starter]], [[https://github.com/HaoZeke/dotDoom][HaoZeke/dotDoom]] and others. It contains the
basic structure of a literate config along with some optimizations to ensure a
fast load time.

Add the ~doom-emacs~ metadata comments to tangle exports:

#+BEGIN_SRC emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; ~/.doom.d/config.el
#+END_SRC

** Org File Tweaks
There are a few tweaks included in this org file that make it a little easier to
work with.

*** Automatically Tangle
First there is a property defined on the file:

#+BEGIN_SRC org :tangle no
header-args :tangle yes
#+END_SRC

This tells emacs to automatically tangle (include) all code blocks in this file
when generating the code for the config, unless the code block explicitly
includes =:tangle no= as the above code block does.

*** Visibility Settings
Next we have a property defined on the [[Configuration][Configuration]] heading that defines the
visibility that tells org to show it's direct children on startup. This way a
clean outline of all sub headings under Configuration is shown each time this
file is opened in org-mode.

*** Table of Contents
Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag:
=:TOC_3_gh:=. This tells an org-mode package =toc-org= to generate a table of
contents under this heading that has a max depth of 3 and is created using
Github-style hrefs. This table of contents is updated everytime the file is
saved and makes for a functional table of contents that works property directly
on github.


** IDENTITY :identity:

*** Emacs User

#+begin_src emacs-lisp
(setq user-full-name "David Conner"
      user-mail-address "noreply@te.xel.io")
#+end_src

** DOOM MODULES & PACKAGES :modules:

*** Explore/Config Doom Modules
+ [ ] [[https://github.com/magit/transient][transient]]
+ [ ] lsp-mode
+ [ ] [[https://github.com/joaotavora/eglot][eglot]] (management/automation for LSP servers) + [[https://github.com/non-Jedi/eglot-jl][eglot-jl]]
+ [ ] [[https://github.com/raxod502/prescient.el][ivy-prescient]]
+ [ ] ob-async
+ [ ] [[https://github.com/snosov1/toc-org][toc-org]] (add toc to org files)
+ [ ] [[https://github.com/ema2159/centaur-tabs][tabs]] (or centaur-tabs; + tab-bar-groups)
+ [ ] CLONE: debugger (+ [[https://github.com/realgud/realgud/][realgud]]?)
+ [ ] org-roam?
+ [ ] CLONE: [[https://github.com/countvajhula/symex.el][symex]]
+ [ ] autoformat code (is this setup?)
+ snippets

*** TODO decide on modules
+ [ ] ibuffer /interactive buffer management/
+ [ ] [[https://github.com/wbolster/emacs-direnv][direnv]] (requires configuring direnv in shell?)
+ [ ] editorconfig /let someone else argue about tabs vs spaces/
+ [ ] pdf (and [[https://github.com/weirdNox/org-noter][org-noter]] for PDF outline-extraction)
  - see [[https://tech.memoryimprintstudio.com/pdf-annotation-related-tools/][this post]] on [[https://github.com/politza/pdf-tools][PDF Tools]], which can be a pain to configure
  - automatically ingesting ToC into Org Mode and PDF annotations <=> Org Mode)
    could be useful if dealing with lots of academic journals

*** TODO check out [[https://cupermind.com/post/Emacs-as-DevOps-editor][modules for devops]]
+ [ ] try [[https://github.com/fourier/ztree][fourier/ztree]] for directory diff
+ [ ] configure tramp

*** TODO Find modules/answers for
+ Kubernetes
+ Open API
+ declarative config for bulk git repository cloning into a folder structure
  (and visiting the sub-repos, which should not be submodules)

*** IDEA Mode or tools for building XKB keyboards
+ Ranging from a custom kbd to layout to variants to options
  + particularly, to build something like the German Neo keyboard (perhaps see if they have scripts/tooling)
  + [[https://www.x.org/releases/X11R7.6/doc/xorg-docs/input/XKB-Config.html][XKB config guide]] provides some toplevel info, but not nearly as much as the protocol description. it's impossible to find a name for this DSL (unless it's just too obvious)
  + unfortunately, the only way to hook in would be to extract metadata (via
    AST?) from the actual freedsktop xkb source found in [[https://archlinux.org/packages/extra/any/xkeyboard-config/][xkeyboard-config]]

** SUPERFICIAL :uiux:

Emacs UI Configs

*** Doom Theme

#+begin_src emacs-lisp
(setq doom-theme 'doom-acario-dark
      doom-acario-dark-brighter-comments nil
      doom-acario-dark-brighter-modeline t
      doom-acario-dark-comment-bg nil
      doom-acario-dark-padded-modeline 4)
#+end_src

*** Font

#+begin_src emacs-lisp
(set-frame-font "Source Code Pro 12" nil t)
#+end_src

*** Ligatures

Disable extra ligatures in a few modes =from luca=

#+BEGIN_SRC emacs-lisp
(setq +ligatures-extras-in-modes
      '(not special-mode comint-mode eshell-mode term-mode vterm-mode python-mode))
#+END_SRC

**** TODO configure [[org:/home/dc/.emacs.d/modules/ui/ligatures/README.org][+ligatures]] module

*** Window UI

Dividers are too thin to grab if only 1px

#+begin_src emacs-lisp
(setq window-divider-default-right-width 3)
(setq window-divider-default-bottom-width 3)
#+end_src

**** TODO automatically balance window widths?
**** TODO setup startup windows (luca)

*** Completion prompts

**** TODO (luca) Prescient + selectrum + consult + marginalia + embark

*** Treemacs

Set a default width for treemacs & disable filewatch unless needed

#+begin_src emacs-lisp
(after! treemacs
  (setq treemacs-width 24)
  (treemacs-filewatch-mode -1))
#+end_src

Key bindings ([[https://github.com/sei40kr/spacemacs.d/blob/master/treemacs-custom.el][treemacs example in spacemacs]])

#+begin_src emacs-lisp
(map! :map treemacs-mode-map :after treemacs
      (:prefix "o" :desc "Tags" "t" 'treemacs-toggle-node-prefer-tag-visit))
#+end_src

It is possible to make the Treemacs window
draggable by default with ~(setq treemacs--width-is-locked nil)~ on startup,
which i finally figured out (immediately before finally discovering
~(balance-windows)~ which maximizes the treemacs width if it's not fixed.....)

*** Line Numbers

This determines the style of line numbers. For relative line numbers, set this
to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

*** which-key

shorten the delay (from luca)

#+BEGIN_SRC emacs-lisp
(after! which-key
    (setq which-key-idle-delay 0.5))
#+END_SRC

*** Modeline

**** TODO configure modeline (refer to HaoZeke, luca and others)

*** Misc

**** TODO toggle centered cursor? (luca)

*** TODO fix UI/UX issues in doom :doom:superficial:
+ [ ] fix `+company/complete` popup ~(setq doom-theme 'doom-acario-dark)~

** COMPANY :company:
*** TODO check luca: delay/prefix, disable tab? and yasnippets in company

** DIRED :dired:

Remove `.` and `..` from list of omitted file patterns (so i can always run
commands on the directory). Also `M-!` will run commands on the dir without
parameterizing a subdir.

#+begin_src emacs-lisp
(setq dired-omit-files "^.DS_Store\\'\\|^.project\\(?:ile\\)?\\'\\|^.\\(svn\\|git\\)\\'\\|^.ccls-cache\\'\\|\\(?:\\.js\\)?\\.meta\\'\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'")
#+end_src

*** TODO configure [[https://github.com/xahlee/xah-dired][Xah Dired]] package & keys
+ full of helpers for working with images in dired.
+ need to check Xah's init files for hotkeys

** SHELL :shell:

*** Explicit Shell

This fixes an issue i'm having where ~/bin/fish~ is the default shell no matter
how i've configured things with ~chsh~. This was done by Garuda/Arch either
before or after the doom/emacs install.

#+begin_src emacs-lisp
(setq explicit-shell-file-name "/bin/zsh")
#+end_src
*** TODO check luca shell configs

** ELISP :elisp:

*** TODO configure parenedit

** IVY :ivy:

*** TODO configure views to use with ~ivy-switch-view~

** ORG MODE :org:

*** TODO setup org to emphasize with parenedit

*** Keys :kbdmaps:

**** TODO remap =C-c i w */_=+~= to wrap with sp-wrap-parens (need to def function?) =from HaoZeke=

#+begin_src emacs-lisp
;; (after! org
;;   (map!

;;    ))
#+end_src

**** TODO remap ~org-forward-heading-same-level~
+ ~C-c C-b~ maps to ~org-backward-heading-same-level~
+ ~C-c C-f~ conflicts with code folding (which does nothing in org/babel)

*** Org Literate

prevent over-eager dotfiles recompilation =from HaoZeke=

#+BEGIN_SRC emacs-lisp
(after! org
  (remove-hook 'after-save-hook #'+literate|recompile-maybe))
#+END_SRC

*** Org Directory

#+begin_src emacs-lisp
(setq org-directory "/data/org")
#+end_src

*** Org Agenda

#+begin_src emacs-lisp
(after! org
  (setq org-log-done 'time
        org-support-shift-select t
        ;;org-agenda-files (concat (file-name-as-directory org-directory) "agenda.org")
        ;; TODO include content from Adam James
        ))
#+end_src

*** Org Babel

*** TODO setup org-agenda :doom:agenda:
+ [X] setup ~org-agenda-files~
*** TODO setup org-export-async-init-file (see [[https://dotdoom.rgoswami.me/config.html][1.2.3 Async Exports]])
*** TODO look into [[https://github.com/myuhe/org-gcal.el][org-gcal]] and [[https://github.com/dengste/org-caldav][org-caldav]] to manage/edit calendars
+ Also, refer to [[https://tasshin.com/blog/implementing-a-second-brain-in-emacs-and-org-mode/][org mode as 2nd brain]]

*** Org Capture

**** TODO luca capture templates (thoughts for day)
** BABEL :babel:

** KEYBOARD :kbd:

Most of these configs should be in their individual ~*-mode~ sections or under the *:kbd:* tag

#+begin_src emacs-lisp
;; Fixes problems with dead keys
(require 'iso-transl)
#+end_src

*** TODO japanese module

** MOUSE :mouse:

see [[ergoemacs.org/emacs/emacs_mouse_wheel_config.html][Xah Lee's post on Mouse Config]] for more info on the how & why

*** Misc Mouse Configs

#+begin_src emacs-lisp
(setq mouse-wheel-progressive-speed nil)
#+end_src

*** Mouse 8 and 9
:PROPERTIES:
:ID:       692e65d2-2cd3-4564-bd75-26dcc2b84251
:END:

#+begin_src emacs-lisp
(map! "<mouse-8>" 'projectile-find-file)
(map! "<mouse-9>" 'projectile-grep)
(map! "C-M-<mouse-8>" '+workspace/switch-left)
(map! "C-M-<mouse-9>" '+workspace/switch-right)
(map! "C-<mouse-8>" '+ivy/switch-buffer)
(map! "C-<mouse-9>" '+ivy/switch-workspace-buffer)
(map! "M-<mouse-8>" 'doom/save-session) ;; TODO: remap
(map! "M-<mouse-9>" 'doom/load-session) ;; TODO: remap
(map! "M-S-<mouse-8>" 'winner-undo) ;; TODO: remap
(map! "M-S-<mouse-9>" 'winner-redo) ;; TODO: remap
(map! "S-<mouse-8>" 'previous-buffer)
(map! "S-<mouse-9>" 'next-buffer)
#+end_src

*** TODO configure more functionality for the mouse :doom:mouse:keys:
+ [ ] navigate to function at point
+ [ ] describe function at point
+ [ ] ~(kbd "<mouse-4>")~ linux mouse wheel scroll up
+ [ ] ~(kbd "<mouse-5>")~ linux mouse wheel scroll down

** DEVOPS :devops:

*** Dockerfile

so the ~## -*- docker-image-name: "image-name" -*-~ directive works with
~dockerfile-mode~

#+begin_src emacs-lisp
(put 'dockerfile-image-name 'safe-local-variable #'stringp)
#+end_src

*** Kubernetes

**** TODO setup kubernetes.el :doom:devops:packages:
**** TODO evaluate ~kubectl~ package :doom:devops:packages:

** EMACS MISC :emisc:

*** Bug Mode (for KDE Bugzilla)

**** TODO: fix bug-mode (... or just use email)

#+begin_src
;;(setq bug-instance-plist
;;      '(:kde (:url "https://bugs.kde.org" :api-key "......." :type bz-rpc)))
;;(setq bug-default-instance :kde)
#+end_src

*** Xah Lee Command Log Mode

This is good for streaming -- your keystrokes and their commands get logged to a buffer which can be displayed.

**** TODO setup (needs to be imported from melpa or Xah Lee emacs init)

*** Query Replace Regexp using matching groups

[[https://emacs.stackexchange.com/questions/50220/emacs-replace-regexp-reference-the-match-in-the-replace-argument][This Stack Exchange]] says to query with ~XYZ\(...\)~ and replace with ~XYZ\1~.
See [[https://www.emacswiki.org/emacs/RegularExpression][EmacsWiki: Regex]] for more info

** BLOG & TEXT :plaintext:

*** TODO check out deft module

** LOOKUP :emacslookup:

*** TODO configure =+dictionary= flag
*** TODO configure =+docset= flag functionality
**** [ ] clojure docsets
**** [ ] julia docsets
**** [ ] c++ docsets

** LATEX :latex:

(From Hsin Haoyu) Apparently, [[https://mirror.aarnet.edu.au/pub/CTAN/systems/knuth/dist/tex/tex.web][the TeX source code]] was written in Pascal/TeX was
literate programming code written by Knuth in Pascal/TeX.

** CLOJURE :clojure:

*** LSP :lsp:
**** TODO follow [[https://emacs-lsp.github.io/lsp-mode/tutorials/clojure-guide/][this guide]]
*** TODO aggressive indent (luca)
*** TODO smartparens/lispyparens (luca)

** JULIA :julia:
*** TODO configure julia (and decide on eglot)

** C++ :cpp:

*** Doxygen Support
#+begin_src emacs-lisp
;; from HaoZeke/dotdoom
(use-package! highlight-doxygen
  :hook ((c-mode c++-mode) . highlight-doxygen-mode))
#+end_src

*** More Files
#+begin_src emacs-lisp
;; from HaoZeke/dotdoom
(setq auto-mode-alist (append '(
                                ("\\.C$" . c++-mode)
                                ("\\.cc$" . c++-mode)
                                ("\\.cpp$" . c++-mode)
                                ("\\.inl$" . c++-mode)
                                ("\\.H$" . c++-mode)
                                ("\\.hh$" . c++-mode)
                                ("\\.hpp$" . c++-mode)
                                )
                              auto-mode-alist))
#+end_src

** KDE :kde:

** QT :qt:
