#+TITLE: Doom Emacs Config
#+AUTHOR: David Conner
#+DESCRIPTION: Inspired by the personal Doom Emacs config of DT, HaoZeke and others
#+PROPERTY: header-args :tangle ./config.el
#+STARTUP: showeverything
#+OPTIONS: toc:nil

* About this file

This is an Emacs literate config, drawing inspiration from the following:

+ [[https://github.com/gilbertw1/emacs-literate-starter/][gilbertw1/emacs-literate-starter]]
+ [[https://github.com/HaoZeke/dotDoom][HaoZeke/dotDoom]]
+ And others

The TOC is loosely based on the Doom Emacs categories to make it simpler for
others to grok the structure and simpler for me to organize. The TOC headings
are generated with =toc-org= by specifying a heading including the tag:
=:TOC_3_gh:=.

** Tangle Output

Add the ~doom-emacs~ metadata comments to tangle exports:

#+BEGIN_SRC emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; ~/.doom.d/config.el
(setq user-full-name "David Conner"
      user-mail-address "noreply@te.xel.io")
#+END_SRC

When specified by =:tangle=, export the =(package! ...)= declarations to =packages.el=.

#+BEGIN_SRC emacs-lisp :tangle ./packages.el
;; -*- no-byte-compile: t; -*-
;;; ~/.doom.d/packages.el
#+END_SRC

There may be other babel source blocks. Eventually, I would like include some
elisp code for reflecting on Doom Emacs (e.g. extracting a list of packages
added by Doom modules).

* Table of Contents :TOC_3_gh:
- [[#about-this-file][About this file]]
  - [[#tangle-output][Tangle Output]]
- [[#configel][Config.el]]
  - [[#input][INPUT]]
    - [[#keyboard][Keyboard]]
    - [[#point-movement][Point Movement]]
    - [[#mouse][Mouse]]
  - [[#completion][COMPLETION]]
    - [[#completion-prompts][Completion prompts]]
    - [[#company][Company]]
    - [[#ivy][IVY]]
  - [[#ui][UI]]
    - [[#doom-theme][Doom Theme]]
    - [[#font][Font]]
    - [[#ligatures][Ligatures]]
    - [[#window-ui][Window UI]]
    - [[#tabs][Tabs]]
    - [[#startup][Startup]]
    - [[#all-the-icons][All The Icons]]
    - [[#treemacs][Treemacs]]
    - [[#which-key][which-key]]
    - [[#modeline][Modeline]]
    - [[#misc][Misc]]
  - [[#editor][EDITOR]]
  - [[#emacs][EMACS]]
    - [[#dired][DIRED]]
  - [[#term][TERM]]
    - [[#shell][Shell]]
  - [[#checkers][CHECKERS]]
  - [[#tools][TOOLS]]
    - [[#lookup][Lookup]]
    - [[#git][Git]]
    - [[#magit][Magit]]
    - [[#git-1][Git]]
    - [[#github][Github]]
    - [[#dockerfile][Dockerfile]]
    - [[#kubernetes][Kubernetes]]
    - [[#archlinux][Archlinux]]
    - [[#lsp-mode][LSP Mode]]
  - [[#os][OS]]
  - [[#org][ORG]]
    - [[#setup-org-to-emphasize-with-parenedit][setup org to emphasize with parenedit]]
    - [[#keys][Keys]]
    - [[#org-literate][Org Literate]]
    - [[#org-directory][Org Directory]]
    - [[#org-agenda][Org Agenda]]
    - [[#org-capture][Org Capture]]
    - [[#source-blocks][Source Blocks]]
    - [[#org-babel][Org Babel]]
    - [[#setup-org-agenda][setup org-agenda]]
    - [[#setup-org-export-async-init-file-see-123-async-exports][setup org-export-async-init-file (see 1.2.3 Async Exports)]]
    - [[#look-into-org-gcal-and-org-caldav-to-manageedit-calendars][look into org-gcal and org-caldav to manage/edit calendars]]
  - [[#lang][LANG]]
    - [[#elisp][ELISP]]
    - [[#latex][LATEX]]
    - [[#clojure][CLOJURE]]
    - [[#julia][JULIA]]
    - [[#kde][KDE]]
    - [[#qt][QT]]
    - [[#c][C++]]
  - [[#email][EMAIL]]
  - [[#app][APP]]
  - [[#config][CONFIG]]
    - [[#prismel][Prism.el]]
    - [[#rainbow-mode][Rainbow Mode]]
- [[#footnotes][Footnotes]]

* Config.el :doom:config:

:PROPERTIES:
:VISIBILITY: children
:END:

** INPUT :input:

*** Keyboard :kbd:

Most of these configs should be in their individual ~*-mode~ sections or under the *:kbd:* tag

#+begin_src emacs-lisp
;; Fixes problems with dead keys
(require 'iso-transl)
#+end_src

*** Point Movement :kbd:point_movement:

The following are unmapped. In terminal emacs, keystrokes with a control
modifiers, like =C-a= is equivalent to =C-S-a= or =C-A=.

+ B,F
  + [X] C     bf -char
  + [X]   M   bf -word
  + [-] C   S bf (C-h C-k shows nothing)
  + [-]   M S bf
  + [X] C M   bf sp- -sexp
  + [-] C M S bf
+ P,N
  + [X] C     pn -line
  + [X]   M   pn
  + [-] C   S pn
  + [-]   M S pn
  + [!] C M   pn -list (cant recognize C-M-p !!!!)
  + [X] C M S pn -list
+ A E
  + [X] C     ae -of-line
  + [X]   M   ae -sentence
  + [-] C   S ae
  + [-]   M S ae
  + [X] C M   ae sp- -of-sexp
  + [-] C M S ae
+ { } [ ]
  + [X] C     [] abort-recursive-edit (translates C-[ as ESC !!!!)
  + [ ]   M   []
  + [ ] C   S {}
  + [X]   M S {} -paragraph
  + [ ] C M   [] !!!! translates C-M-[ as M-ESC... (but not C-M-S)
  + [ ] C M S {}
+ < > , .
  + [ ] C     ,.
  + [X]   M   ,  better-jumper-jump-backward
  + [X]   M    . org-cycle-agenda-files
  + [ ] C   S <>
  + [X]   M S <> -of-buffer
  + [ ] C M   ,
  + [X] C M    . xref-find-apropos
  + [ ] C M S <>
+ 0 9 ( )
  + [X] C     90 digit-argument
  + [X]   M   90 digit-argument
  + [ ] C   S ()
  + [ ]   M S ()
  + [X] C M   90 digit-argument
  + [ ] C M S ()


**** TODO write lisp script to autogenerate movement documentation?
+ add metadata to auto-hide generated code blocks
+ or generate code blocks for each char class with whitespace-aligned kbd cmds
**** TODO figure out how emacs handles selection/marking for C-b and C-S-b
**** TODO kbd mappings for org-mode point movement :org:
**** TODO kbd mappings for smartparens point movement :smartparens:



*** Mouse :mouse:

see [[ergoemacs.org/emacs/emacs_mouse_wheel_config.html][Xah Lee's post on Mouse Config]] for more info on the how & why

**** Misc Mouse Configs

#+begin_src emacs-lisp
(setq mouse-wheel-progressive-speed nil)
#+end_src

**** Mouse 8 and 9
:PROPERTIES:
:ID:       692e65d2-2cd3-4564-bd75-26dcc2b84251
:END:

#+begin_src emacs-lisp
(map! "<mouse-8>" 'projectile-find-file)
(map! "<mouse-9>" 'projectile-grep)
(map! "C-M-<mouse-8>" '+workspace/switch-left)
(map! "C-M-<mouse-9>" '+workspace/switch-right)
(map! "C-<mouse-8>" '+ivy/switch-buffer)
(map! "C-<mouse-9>" '+ivy/switch-workspace-buffer)
(map! "M-<mouse-8>" 'doom/save-session) ;; TODO: remap
(map! "M-<mouse-9>" 'doom/load-session) ;; TODO: remap
(map! "M-S-<mouse-8>" 'winner-undo) ;; TODO: remap
(map! "M-S-<mouse-9>" 'winner-redo) ;; TODO: remap
(map! "S-<mouse-8>" 'previous-buffer)
(map! "S-<mouse-9>" 'next-buffer)
#+end_src

**** TODO configure more functionality for the mouse :doom:mouse:keys:
+ [ ] navigate to function at point
+ [ ] describe function at point
+ [ ] ~(kbd "<mouse-4>")~ linux mouse wheel scroll up
+ [ ] ~(kbd "<mouse-5>")~ linux mouse wheel scroll down

** COMPLETION :completion:

*** Completion prompts

**** TODO (luca) Prescient + selectrum + consult + marginalia + embark

*** Company :company:

**** TODO check luca: delay/prefix, disable tab? and yasnippets in company

*** IVY :ivy:

**** TODO configure views to use with ~ivy-switch-view~


** UI :uiux:

*** Doom Theme

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)

;; (setq doom-theme 'doom-acario-dark
;;   doom-acario-dark-brighter-comments nil
;;   doom-acario-dark-brighter-modeline t
;;   doom-acario-dark-comment-bg nil
;;   doom-acario-dark-padded-modeline 4)
#+end_src

*** Font

#+begin_src emacs-lisp
(set-frame-font "Source Code Pro 12" nil t)
#+end_src

+ config =doom-font= and =doom-variable-pitch-font=
+ config =ivy-posframe-font=

*** Ligatures

Disable extra ligatures in a few modes [fn:luca_doom]

#+BEGIN_SRC emacs-lisp
(setq +ligatures-extras-in-modes
      '(not special-mode comint-mode eshell-mode term-mode vterm-mode python-mode))
#+END_SRC

**** TODO configure [[org:/home/dc/.emacs.d/modules/ui/ligatures/README.org][+ligatures]] module

*** Window UI

Dividers are too thin to grab if only 1px

#+begin_src emacs-lisp
(setq window-divider-default-right-width 1)
(setq window-divider-default-bottom-width 1)
#+end_src

**** TODO automatically balance window widths?
**** TODO setup startup windows (luca)

*** Tabs

Use [[https://github.com/alphapapa/bufler.el][Bufler]]

#+begin_src emacs-lisp :tangle ./packages.el
(package! bufler)
(package! burly)
#+end_src

#+begin_src emacs-lisp
(use-package! bufler)
(use-package burly)

(add-hook 'doom-init-ui-hook
          (lambda () (global-tab-line-mode +1)
                (bufler-mode +1)
                (bufler-tabs-mode +1)))
#+end_src


**** TODO configure [[https://github.com/alphapapa/bufler.el#group-types][bufler groups]]
+ tabs for additional/multiple projectile projects?
+ also configure =buffler-mode= and =buffler=
**** TODO Configure =bufler-face-prefix= & set =prism faces=

**** TODO Burly (bookmarks to tab groups and window configs)
**** TODO add burly to doom startup screen

*** Startup

**** TODO write script to generate all 64 hexagrams in SVG for random Doom startup

*** All The Icons

#+begin_src emacs-lisp :tangle ./packages.el
(package! all-the-icons-dired)
#+end_src

**** TODO (configure) All the icons
+ [ ] treemacs-all-the-icons
+ [ ] [[https://github.com/seagle0128/all-the-icons-ivy-rich][all-the-icons-ivy-rich]] (doom ivy includes ivy-rich)

*** Treemacs

Set a default width for treemacs & disable filewatch unless needed

#+begin_src emacs-lisp
(after! treemacs
  (setq treemacs-width 24)
  (treemacs-filewatch-mode -1))
#+end_src

Key bindings ([[https://github.com/sei40kr/spacemacs.d/blob/master/treemacs-custom.el][treemacs example in spacemacs]])

#+begin_src emacs-lisp
(map! :map treemacs-mode-map :after treemacs
      (:prefix "o" :desc "Tags" "t" 'treemacs-toggle-node-prefer-tag-visit))
#+end_src

It is possible to make the Treemacs window
draggable by default with ~(setq treemacs--width-is-locked nil)~ on startup,
which i finally figured out (immediately before finally discovering
~(balance-windows)~ which maximizes the treemacs width if it's not fixed.....)

*** which-key

shorten the delay (from luca)

#+BEGIN_SRC emacs-lisp
(after! which-key
    (setq which-key-idle-delay 0.5))
#+END_SRC

*** Modeline

**** TODO configure modeline (refer to HaoZeke, luca and others)
**** TODO check out [[https://github.com/hlissner/doom-emacs-private/blob/master/lisp/modeline.el][Hlissner's modeline]] for customization ideas

*** Misc

This determines the style of line numbers. For relative line numbers, set this
to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

**** Centered Cursor Mode

From Luca

#+begin_src emacs-lisp :tangle ./packages.el
(package! centered-cursor-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! centered-cursor-mode ;: defer t
  :config (map! :leader :desc "Toggle Centered Cursor"
                "t-" (λ! () (interactive) (centered-cursor-mode 'toggle))))
#+end_src

**** TODO check out [[https://github.com/glucas/deft][deft]] module


** EDITOR :editor:

**** TODO: consider auto-save-default

** EMACS :emacs:

*** DIRED :dired:

Remove `.` and `..` from list of omitted file patterns (so i can always run
commands on the directory). Also `M-!` will run commands on the dir without
parameterizing a subdir.

#+begin_src emacs-lisp
(setq dired-omit-files "^.DS_Store\\'\\|^.project\\(?:ile\\)?\\'\\|^.\\(svn\\|git\\)\\'\\|^.ccls-cache\\'\\|\\(?:\\.js\\)?\\.meta\\'\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'")
#+end_src

**** TODO configure [[https://github.com/xahlee/xah-dired][Xah Dired]] package & keys
+ full of helpers for working with images in dired.
+ need to check Xah's init files for hotkeys

** TERM :term:

*** Shell

**** Explicit Shell

This fixes an issue i'm having where ~/bin/fish~ is the default shell no matter
how i've configured things with ~chsh~. This was done by Garuda/Arch either
before or after the doom/emacs install.

#+begin_src emacs-lisp
(setq explicit-shell-file-name "/bin/zsh")
#+end_src

**** TODO check luca shell configs


** CHECKERS :checkers:

** TOOLS :tools:

*** Lookup :lookup:

**** TODO configure =+dictionary= flag
**** TODO configure =+docset= flag functionality
***** [ ] clojure docsets
***** [ ] julia docsets
***** [ ] c++ docsets

*** Git

From Doom Modules:
+ magit-gh-pulls
+ magit-gitflow
+ magit-todos
+ magit-popup
+ git-gutter
+ git-gitter-fringe

#+begin_src

#+end_src

*** Magit
+ [ ] *magit-forge*
+ [ ] magit-delta
+ [ ] magit-org-todos
+ [ ] forge (also integrates with magit)
+ [ ] orgit (org links to magit buffers)
+ [ ] orgit-forge

**** TODO: configure =magit-repository-directories=
+ see =hlissner= config & others

*** Git
+ [ ] *[[https://github.com/10sr/git-walktree-el][git-walktree]]*
+ [ ] *git-blamed*
+ [ ] *git-messenger* (check performance)
+ [ ] *git-timemachine*
+ [ ] gitolite-clone
+ [ ] borg (assimilate emacs packages as git submodules)

*** Github
+ [ ] github-explorer
+ [ ] *github-pullrequest*
+ [ ] *github-stars*
+ [ ] *github-search*
+ [ ] *magithub*
+ [ ] *org2issue*
+ [ ] *treemacs-magit*

*** Dockerfile

so the ~## -*- docker-image-name: "image-name" -*-~ directive works with
~dockerfile-mode~

#+begin_src emacs-lisp
(put 'dockerfile-image-name 'safe-local-variable #'stringp)
#+end_src

*** Kubernetes

**** TODO setup kubernetes.el :doom:devops:packages:
**** TODO evaluate ~kubectl~ package :doom:devops:packages:

*** Archlinux

**** PKGBUILD Mode

#+BEGIN_SRC emacs-lisp :tangle ./packages.el
(package! pkgbuild-mode
  :recipe (:host github :repo "juergenhoetzel/pkgbuild-mode"))
#+END_SRC

***** TODO: use-package! for pkgbuild-mode

*** LSP Mode

**** TODO work out lsp/eldoc interactions

** OS :os:

** ORG :org:

*** TODO setup org to emphasize with parenedit

*** Keys :kbdmaps:

**** TODO remap =C-c i w */_=+~= to wrap with sp-wrap-parens (need to def function?) =from HaoZeke=

#+begin_src emacs-lisp
;; (after! org
;;   (map!

;;    ))
#+end_src

**** TODO remap ~org-forward-heading-same-level~
+ ~C-c C-b~ maps to ~org-backward-heading-same-level~
+ ~C-c C-f~ conflicts with code folding (which does nothing in org/babel)

*** Org Literate

prevent over-eager dotfiles recompilation =from HaoZeke=

#+BEGIN_SRC emacs-lisp
(after! org
  (remove-hook 'after-save-hook #'+literate|recompile-maybe))
#+END_SRC

*** Org Directory

#+begin_src emacs-lisp
(setq org-directory "/data/org")
#+end_src

*** Org Agenda

#+begin_src emacs-lisp
(after! org
  (setq org-log-done 'time
        org-support-shift-select t
        ;;org-agenda-files (concat (file-name-as-directory org-directory) "agenda.org")
        ;; TODO include content from Adam James
        ))
#+end_src

*** Org Capture

**** TODO luca capture templates (thoughts for day)

*** Source Blocks

Don't indent content in source blocks

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

*** Org Babel

**** [[https://github.com/krisajenkins/ob-translate][ob-translate]]

For someone who owns a ton of original langauge and interlinear/bilingual books,
getting this into org-mode would be super helpfu. It's way more efficient than
manually writing down the translations and the results are searchable. Finally,
perhaps I can make meaningfull progress on that Español copy of Borges'
collections or my italian copy of Foucault's Pendulum -- both of which are far
superior when the etymological connections are left in tact.

#+begin_src emacs-lisp :tangle ./packages.el
(package! google-translate)
(package! ob-translate)
#+end_src

Config google-translate.el [[https://github.com/atykhonov/google-translate/issues/137][fix for TKK errors]]

#+begin_src emacs-lisp
(use-package! google-translate :demand t
  :init (require 'google-translate)
  :functions (my-google-translate-at-point google-translate--search-tkk)
  :custom (google-translate-backend-method 'curl)
  :config
  (defun google-translate--search-tkk ()
    "Search TKK."
    (list 430675 2721866130))
  (defun my-google-translate-at-point ()
    "reverse translate if prefix"
    (interactive)
    (if current-prefix-arg
        (google-translate-at-point)
      (google-translate-at-point-reverse)))
  :bind
  ;;("C-T". my-google-translate-at-point)
)
#+end_src

Example:

#+BEGIN_SRC translate :src en :dest de,fr,ar,ja :results output :tangle no
This is a test.
#+END_SRC

#+RESULTS:
| de | Das ist ein Test.  |
| fr | C'est un test.     |
| ar | هذا اختبار.        |
| ja | これはテストです。 |

**** TODO emacs support for surfing etymology in wiktionary

#+begin_src translate :src en :dest ja :results output :tangle no
Extra Sensory Perception
#+end_src

#+RESULTS:
: 超感覚的知覚

*** TODO setup org-agenda :doom:agenda:
+ [X] setup ~org-agenda-files~
*** TODO setup org-export-async-init-file (see [[https://dotdoom.rgoswami.me/config.html][1.2.3 Async Exports]])
*** TODO look into [[https://github.com/myuhe/org-gcal.el][org-gcal]] and [[https://github.com/dengste/org-caldav][org-caldav]] to manage/edit calendars
+ Also, refer to [[https://tasshin.com/blog/implementing-a-second-brain-in-emacs-and-org-mode/][org mode as 2nd brain]]

** LANG :lang:

*** ELISP :elisp:

**** TODO configure eldoc
**** TODO configure parenedit

*** LATEX :latex:

(From Hsin Haoyu) Apparently, [[https://mirror.aarnet.edu.au/pub/CTAN/systems/knuth/dist/tex/tex.web][the TeX source code]] was written in Pascal/TeX was
literate programming code written by Knuth in Pascal/TeX.

*** CLOJURE :clojure:

**** LSP :lsp:
***** TODO follow [[https://emacs-lsp.github.io/lsp-mode/tutorials/clojure-guide/][this guide]]
**** TODO aggressive indent (luca)
**** TODO smartparens/lispyparens (luca)

*** JULIA :julia:
**** TODO configure julia (and decide on eglot)
**** TODO configure org-babel for julia

*** KDE :kde:

*** QT :qt:

*** C++ :cpp:

**** Doxygen Support

#+begin_src emacs-lisp :tangle ./packages.el
(package! highlight-doxygen)
#+end_src

Doxygen for c/cpp [fn:haozeke]

#+begin_src emacs-lisp
(use-package! highlight-doxygen
  :hook ((c-mode c++-mode) . highlight-doxygen-mode))
#+end_src

**** More Files
#+begin_src emacs-lisp
;; from HaoZeke/dotdoom
(setq auto-mode-alist (append '(
                                ("\\.C$" . c++-mode)
                                ("\\.cc$" . c++-mode)
                                ("\\.cpp$" . c++-mode)
                                ("\\.inl$" . c++-mode)
                                ("\\.H$" . c++-mode)
                                ("\\.hh$" . c++-mode)
                                ("\\.hpp$" . c++-mode)
                                )
                              auto-mode-alist))
#+end_src

** EMAIL :email:

** APP :app:

** CONFIG :config:

Misc config goes here

*** Prism.el

#+begin_src emacs-lisp :tangle ./packages.el
(package! prism)
#+end_src

Use doom colors for theme and toggle with =:leader tP=

#+begin_src emacs-lisp
(use-package! prism
  :hook (emacs-lisp-mode . prism-mode)
  :config (map! :leader :desc "Toggle Prism"
                "tP" (lambda () (interactive) (prism-mode 'toggle)))

  (prism-set-colors :lightens '(0 5 10) :desaturations '(-2.5 0 2.5)
    :colors (-map #'doom-color
                  '(red green orange blue yellow violet)))
  ;; red orange green teal yellow blue dark-blue magenta violet cyan dark cyan
  )
#+end_src

*** Rainbow Mode

#+begin_src emacs-lisp
(map! :leader :desc "Toggle Rainbow Mode"
      "tR" (lambda () (interactive) (rainbow-mode 'toggle)))


;; TODO fix to autoload rainbow-mode in doom theme files
;; (setq auto-minor-mode-alist (append '(("theme\\.el$" . rainbow-mode))
                                    ;; auto-minor-mode-alist))
#+end_src

**** TODO customize doom [[file:~/.emacs.d/modules/tools/rgb/README.org::*Features][rainbow module]]

* Footnotes

**** TODO: change in-text attributions to one of a set of footnotes

[fn:luca_doom] lccambiaghi [[https://github.com/lccambiaghi/.doom.d][doom config]]
[fn:luca_vanilla] lccambiaghi [[https://github.com/lccambiaghi/vanilla-emacs][emacs config]]
[fn:haozeke] haozeke [[https://github.com/HaoZeke/doom-emacs][doom config]]
[fn:zzamboni] zzamboni [[https://gitlab.com/zzamboni/dot-doom][doom config]]
