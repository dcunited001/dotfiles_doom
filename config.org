#+TITLE: Doom Emacs Config
#+AUTHOR: David Conner
#+DESCRIPTION: Inspired by the personal Doom Emacs config of DT, HaoZeke and others
#+PROPERTY: header-args :tangle ./config.el
#+STARTUP: showeverything
#+OPTIONS: toc:nil

* About this file

This is an Emacs literate config, drawing inspiration from the following:

+ [[https://github.com/gilbertw1/emacs-literate-starter/][gilbertw1/emacs-literate-starter]]
+ [[https://github.com/HaoZeke/dotDoom][HaoZeke/dotDoom]]
+ And others

The TOC is loosely based on the Doom Emacs categories to make it simpler for
others to grok the structure and simpler for me to organize. The TOC headings
are generated with =toc-org= by specifying a heading including the tag:
=:TOC_3_gh:=.

** Tangle Output

Add the ~doom-emacs~ metadata comments to tangle exports:

#+BEGIN_SRC emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; ~/.doom.d/config.el
(setq user-full-name "David Conner"
      user-mail-address "noreply@te.xel.io")
#+END_SRC

When specified by =:tangle=, export the =(package! ...)= declarations to =packages.el=.

#+BEGIN_SRC emacs-lisp :tangle ./packages.el
;; -*- no-byte-compile: t; -*-
;;; ~/.doom.d/packages.el
#+END_SRC

There may be other babel source blocks. Eventually, I would like include some
elisp code for reflecting on Doom Emacs (e.g. extracting a list of packages
added by Doom modules).

* Table of Contents :TOC_3_gh:
- [[#about-this-file][About this file]]
  - [[#tangle-output][Tangle Output]]
- [[#configel][Config.el]]
  - [[#input][INPUT]]
    - [[#keyboard][Keyboard]]
    - [[#point-movement][Point Movement]]
    - [[#mouse][Mouse]]
  - [[#completion][COMPLETION]]
    - [[#completion-prompts][Completion prompts]]
    - [[#company][Company]]
    - [[#ivy][IVY]]
  - [[#ui][UI]]
    - [[#doom-theme][Doom Theme]]
    - [[#font][Font]]
    - [[#ligatures][Ligatures]]
    - [[#indent-guides][Indent Guides]]
    - [[#window-ui][Window UI]]
    - [[#bufler-tabs-and-burly-bookmarks][Bufler Tabs and Burly Bookmarks]]
    - [[#startup][Startup]]
    - [[#all-the-icons][All The Icons]]
    - [[#treemacs][Treemacs]]
    - [[#which-key][which-key]]
    - [[#modeline][Modeline]]
    - [[#dimmer][Dimmer]]
    - [[#misc][Misc]]
  - [[#editor][EDITOR]]
    - [[#centered-cursor-mode][Centered Cursor Mode]]
  - [[#emacs][EMACS]]
    - [[#dired][DIRED]]
  - [[#term][TERM]]
    - [[#shell][Shell]]
  - [[#checkers][CHECKERS]]
  - [[#tools][TOOLS]]
    - [[#lookup][Lookup]]
    - [[#diff-and-ediff][Diff and Ediff]]
    - [[#git][Git]]
    - [[#magit][Magit]]
    - [[#git-1][Git]]
    - [[#github][Github]]
    - [[#archlinux][Archlinux]]
    - [[#docker][Docker]]
    - [[#kubernetes][Kubernetes]]
    - [[#saltstack][SaltStack]]
    - [[#lsp-mode][LSP Mode]]
    - [[#lsp-ui][LSP UI]]
    - [[#packages-to-evaluate-tools][Packages to Evaluate (Tools)]]
  - [[#os][OS]]
  - [[#org][ORG]]
    - [[#setup-org-to-emphasize-with-parenedit][setup org to emphasize with parenedit]]
    - [[#keys][Keys]]
    - [[#org-literate][Org Literate]]
    - [[#org-directory][Org Directory]]
    - [[#org-agenda][Org Agenda]]
    - [[#org-capture][Org Capture]]
    - [[#source-blocks][Source Blocks]]
    - [[#packages-to-evaluate-org][Packages to Evaluate (Org)]]
  - [[#lang][LANG]]
    - [[#elisp][ELISP]]
    - [[#latex][LATEX]]
    - [[#clojure][CLOJURE]]
    - [[#julia][JULIA]]
    - [[#plantuml][PLANTUML]]
    - [[#kde][KDE]]
    - [[#qt][QT]]
    - [[#c][C++]]
    - [[#packages-to-evaluate-languages][Packages to Evaluate (Languages)]]
  - [[#babel][BABEL]]
    - [[#ensure-this-is-necessary-with-org-init-babel-lazy-loader-h][ensure this is necessary with =+org-init-babel-lazy-loader-h=]]
    - [[#ob-async][ob-async]]
    - [[#ob-translate][ob-translate]]
  - [[#email][EMAIL]]
  - [[#app][APP]]
    - [[#packages-to-evaluate-app][Packages to Evaluate (App)]]
  - [[#config][CONFIG]]
    - [[#prismel][Prism.el]]
    - [[#rainbow-mode][Rainbow Mode]]
- [[#footnotes][Footnotes]]

* Config.el :doom:config:

:PROPERTIES:
:VISIBILITY: children
:END:

** INPUT :input:

[[file:~/.emacs.d/core/core-keybinds.el][.emacs.d/core/core-keybinds.el]] makes for a very useful key & map! reference

*** Keyboard :kbd:

Most of these configs should be in their individual ~*-mode~ sections or under the *:kbd:* tag

#+begin_src emacs-lisp
;; Fixes problems with dead keys
(require 'iso-transl)
#+end_src

*** Point Movement :kbd:point_movement:

The following are unmapped. In terminal emacs, keystrokes with a control
modifiers, like =C-a= is equivalent to =C-S-a= or =C-A=.

+ B,F
  + [X] C     bf -char
  + [X]   M   bf -word
  + [-] C   S bf (C-h C-k shows nothing)
  + [-]   M S bf
  + [X] C M   bf sp- -sexp
  + [-] C M S bf
+ P,N
  + [X] C     pn -line
  + [X]   M   pn
  + [-] C   S pn
  + [-]   M S pn
  + [!] C M   pn -list (cant recognize C-M-p !!!!)
  + [X] C M S pn -list
+ A E
  + [X] C     ae -of-line
  + [X]   M   ae -sentence
  + [-] C   S ae
  + [-]   M S ae
  + [X] C M   ae sp- -of-sexp
  + [-] C M S ae
+ { } [ ]
  + [X] C     [] abort-recursive-edit (translates C-[ as ESC !!!!)
  + [ ]   M   []
  + [ ] C   S {}
  + [X]   M S {} -paragraph
  + [ ] C M   [] !!!! translates C-M-[ as M-ESC... (but not C-M-S)
  + [ ] C M S {}
+ < > , .
  + [ ] C     ,.
  + [X]   M   ,  better-jumper-jump-backward
  + [X]   M    . org-cycle-agenda-files
  + [ ] C   S <>
  + [X]   M S <> -of-buffer
  + [ ] C M   ,
  + [X] C M    . xref-find-apropos
  + [ ] C M S <>
+ 0 9 ( )
  + [X] C     90 digit-argument
  + [X]   M   90 digit-argument
  + [ ] C   S ()
  + [ ]   M S ()
  + [X] C M   90 digit-argument
  + [ ] C M S ()

**** TODO write lisp script to autogenerate movement documentation?
+ add metadata to auto-hide generated code blocks
+ or generate code blocks for each char class with whitespace-aligned kbd cmds
**** TODO figure out how emacs handles selection/marking for C-b and C-S-b
**** TODO kbd mappings for org-mode point movement :org:
**** TODO kbd mappings for smartparens point movement :smartparens:
+ need to decide on smartparens (incompletely [[file:~/.emacs.d/modules/config/default/config.el::when (featurep! +smartparens][mapped by doom]]) paredit
+ or paredit (not mapped; unsure of what is including)

*** Mouse :mouse:

see [[ergoemacs.org/emacs/emacs_mouse_wheel_config.html][Xah Lee's post on Mouse Config]] for more info on the how & why

**** Misc Mouse Configs

#+begin_src emacs-lisp
(setq mouse-wheel-progressive-speed nil)
#+end_src

**** Mouse 8 and 9
:PROPERTIES:
:ID:       692e65d2-2cd3-4564-bd75-26dcc2b84251
:END:

#+begin_src emacs-lisp
(map! "<mouse-8>" 'projectile-find-file)
(map! "<mouse-9>" 'projectile-grep)
(map! "C-M-<mouse-8>" '+workspace/switch-left)
(map! "C-M-<mouse-9>" '+workspace/switch-right)
(map! "C-<mouse-8>" '+ivy/switch-buffer)
(map! "C-<mouse-9>" '+ivy/switch-workspace-buffer)
;; (map! "M-S-<mouse-8>" 'doom/save-session) ;; TODO: remap
;; (map! "M-S-<mouse-9>" 'doom/load-session) ;; TODO: remap
(map! "M-<mouse-8>" 'better-jumper-jump-forward)
(map! "M-<mouse-9>" 'better-jumper-jump-backward)
(map! "S-<mouse-8>" 'previous-buffer)
(map! "S-<mouse-9>" 'next-buffer)
#+end_src

**** TODO other mouse maps
+ and navigating =describe-= and other docs
+ helpful-at-point
+ completion-at-point
+ highlight-symbol-at-point
+ counsel-dash-at-point

**** TODO config better functionality for =mwheelscroll=
+ signature =(mwheel-scroll EVENT &optional ARG)= defined in ~emacs/28/lisp/mwheel.el~
+ =mouse-wheel-scroll-amount-horizontal= parameterizes the event

**** TODO configure more functionality for the mouse :mouse:keys:
+ [ ] navigate to function at point
+ [ ] describe function at point
+ [ ] ~(kbd "<mouse-4>")~ linux mouse wheel scroll up
+ [ ] ~(kbd "<mouse-5>")~ linux mouse wheel scroll down
+ =<fringe>= and =<modeline>=

** COMPLETION :completion:

*** Completion prompts

**** TODO (luca) Prescient + selectrum + consult + marginalia + embark

*** Company :company:

**** TODO check luca: delay/prefix, disable tab? and yasnippets in company

*** IVY :ivy:

Removed =-childframe= for now, as these are actual frames.

**** HOLD configure views to use with ~ivy-switch-view~ (or just use bufler?)



** UI :uiux:

*** Doom Theme

#+begin_src emacs-lisp
(setq doom-theme 'doom-one
      doom-one-brighter-modeline t)

;; (setq doom-theme 'doom-acario-dark
;;   doom-acario-dark-brighter-comments nil
;;   doom-acario-dark-brighter-modeline t
;;   doom-acario-dark-comment-bg nil
;;   doom-acario-dark-padded-modeline 4)
#+end_src

*** Font

#+begin_src emacs-lisp
;; (set-frame-font "Source Code Pro 12" nil t)
(setq doom-font (font-spec :family "JuliaMono" :size 14)
      doom-unicode-font (font-spec :family "JuliaMono" :size 14)
      doom-font-increment 1)

(unless (find-font doom-font)
  (message "couldn't find 'doom-font. using a default.")
  (setq doom-font (font-spec :family "Source Code Pro" :size 18)))

(unless (find-font doom-unicode-font)
  (message "couldn't find 'doom-unicode-font. using a default.")
  (setq doom-font (font-spec :family "Source Code Pro" :size 18)))
#+end_src

+ config =doom-variable-pitch-font=?
+ config =ivy-posframe-font=

*** Ligatures

Disable extra ligatures in a few modes [fn:luca_doom]

#+BEGIN_SRC emacs-lisp
(setq +ligatures-extras-in-modes
      '(not special-mode comint-mode eshell-mode term-mode vterm-mode python-mode))
#+END_SRC

**** TODO configure [[org:/home/dc/.emacs.d/modules/ui/ligatures/README.org][+ligatures]] module

*** Indent Guides

The =indent-guides= doom module conflicts with =prism=. These must be applied to
each buffer in this order:

1. prism
2. indent-guide

**** TODO fix prism/indent-guide conflict

*** Window UI

Dividers are too thin to grab if only 1px

#+begin_src emacs-lisp
(setq window-divider-default-right-width 1)
(setq window-divider-default-bottom-width 1)
#+end_src

**** TODO automatically balance window widths?
**** TODO setup startup windows (luca)

*** Bufler Tabs and Burly Bookmarks

[[https://github.com/alphapapa/bufler.el][Bufler]] uses emacs-27 tabs

#+begin_src emacs-lisp :tangle ./packages.el
(package! bufler)
(package! burly)
#+end_src

#+begin_src emacs-lisp
(use-package! bufler
  :config (map! ;(:after ...?)
           :map ctl-x-map
           :desc "Bufler List" "C-b" #'bufler-list))
(use-package! burly)

(add-hook 'doom-init-ui-hook
          (lambda () (global-tab-line-mode +1)
            (bufler-mode +1)
            (bufler-tabs-mode +1)))
#+end_src

**** TODO Misc bufler config [/]
+ [ ] bufler/tab-bar-mode display disappears (caused by save-desktop/autoloads)
+ [ ] map =C-c o t= or something for tab-line-mode
+ [ ] remap vterm hotkeys
+ [ ] Configure =bufler-face-prefix= & set =prism faces=

**** TODO configure [[https://github.com/alphapapa/bufler.el#group-types][bufler groups]]
+ tabs for additional/multiple projectile projects?
+ also configure =buffler-mode= and =buffler=

**** TODO remove bufler tabs from the wrong places [0/2]
+ [ ] child-frames
+ [ ] popup buffers

**** TODO Misc Burly config
+ Burly (bookmarks to tab groups and window configs)
+ add burly to doom startup screen


*** Startup

**** TODO write script to generate all 64 hexagrams in SVG for random Doom startup

*** All The Icons

#+begin_src emacs-lisp :tangle ./packages.el
(package! all-the-icons-dired)
#+end_src

**** TODO (configure) All the icons
+ [ ] treemacs-all-the-icons
+ [ ] [[https://github.com/seagle0128/all-the-icons-ivy-rich][all-the-icons-ivy-rich]] (doom ivy includes ivy-rich)

*** Treemacs

Set a default width for treemacs & disable filewatch unless needed

#+begin_src emacs-lisp
(after! treemacs
  (setq treemacs-width 24)
  (treemacs-filewatch-mode -1))
#+end_src

Key bindings ([[https://github.com/sei40kr/spacemacs.d/blob/master/treemacs-custom.el][treemacs example in spacemacs]])

#+begin_src emacs-lisp
(map! :map treemacs-mode-map :after treemacs
      (:prefix "o" :desc "Tags" "t" 'treemacs-toggle-node-prefer-tag-visit))
#+end_src

It is possible to make the Treemacs window draggable by default with ~(setq
treemacs--width-is-locked nil)~ on startup, which i finally figured out
(immediately before finally discovering ~(balance-windows)~ which maximizes the
treemacs width if it's not fixed.....)

*** which-key

shorten the delay (from luca)

#+BEGIN_SRC emacs-lisp
(after! which-key
    (setq which-key-idle-delay 0.5))
#+END_SRC

*** Modeline

customize [[https://github.com/seagle0128/doom-modeline][doom-modeline]]

#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  ;; doom-modeline workspace-name has conflicts with bufler tab-bar
  (setq doom-modeline-workspace-name nil

        doom-modeline-height 24
        ;; doom-modeline-project-detection 'ffip,'projectile,'projectile
        doom-modeline-minor-modes t))
#+END_SRC

**** TODO configure modeline (refer to HaoZeke, luca and others)
**** TODO check out [[https://github.com/hlissner/doom-emacs-private/blob/master/lisp/modeline.el][Hlissner's modeline]] for customization ideas
**** TODO figure out error (if consistent) ~Error during redisplay: (eval (doom-modeline-segment--workspace-name)) signaled (invalid-function ((&plist :name :path) workspace))~

*** Dimmer

#+begin_src emacs-lisp :tangle ./packages.el
(package! dimmer)
#+end_src

#+begin_src emacs-lisp
(use-package! dimmer
  :config (setq dimmer-adjustment-mode :background
                dimmer-fraction 0.4)

  (dimmer-configure-company-box)
  (dimmer-configure-magit)
  (dimmer-configure-org)
  (dimmer-configure-hydra)
  (dimmer-configure-which-key)
  (dimmer-configure-posframe))
#+end_src

*** Misc

This determines the style of line numbers. For relative line numbers, set this
to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

**** TODO configure nav-flash (like in spacemacs)

** EDITOR :editor:

**** TODO consider auto-save-default

*** Centered Cursor Mode

#+begin_src emacs-lisp :tangle ./packages.el
(package! centered-cursor-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! centered-cursor-mode ;: defer t
  :config (map! :leader :desc "Toggle Centered Cursor"
                "t-" (λ! () (interactive) (centered-cursor-mode 'toggle))))
#+end_src

** EMACS :emacs:

*** DIRED :dired:

Remove `.` and `..` from list of omitted file patterns (so i can always run
commands on the directory). Also `M-!` will run commands on the dir without
parameterizing a subdir.

#+begin_src emacs-lisp
(setq dired-omit-files "^.DS_Store\\'\\|^.project\\(?:ile\\)?\\'\\|^.\\(svn\\|git\\)\\'\\|^.ccls-cache\\'\\|\\(?:\\.js\\)?\\.meta\\'\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'")
#+end_src

**** TODO configure [[https://github.com/xahlee/xah-dired][Xah Dired]] package & keys
+ full of helpers for working with images in dired.
+ need to check Xah's init files for hotkeys

** TERM :term:

*** Shell

**** Explicit Shell

This fixes an issue i'm having where ~/bin/fish~ is the default shell no matter
how i've configured things with ~chsh~. This was done by Garuda/Arch either
before or after the doom/emacs install.

#+begin_src emacs-lisp
(setq explicit-shell-file-name "/bin/zsh")
#+end_src

**** TODO check luca shell configs


** CHECKERS :checkers:

** TOOLS :tools:

*** Lookup :lookup:

**** TODO configure docsets for =counsel-dash=
+ [ ] find path to zeal docs
**** TODO configure =+dictionary= flag
**** TODO configure =+docset= flag functionality
***** [ ] clojure docsets
***** [ ] julia docsets
***** [ ] c++ docsets

*** Diff and Ediff

**** TODO configure ediff for patching nvidia driver source/headers

*** Git

From Doom Modules:
+ magit-gh-pulls
+ magit-gitflow
+ magit-todos
+ magit-popup
+ git-gutter
+ git-gitter-fringe

#+begin_src

#+end_src

*** Magit
+ [ ] *magit-forge*
+ [ ] magit-delta
+ [ ] magit-org-todos
+ [ ] forge (also integrates with magit)
+ [ ] orgit (org links to magit buffers)
+ [ ] orgit-forge

**** TODO: configure =magit-repository-directories=
+ see =hlissner= config & others

*** Git
+ [ ] *[[https://github.com/10sr/git-walktree-el][git-walktree]]*
+ [ ] *git-blamed*
+ [ ] *git-messenger* (check performance)
+ [ ] *git-timemachine*
+ [ ] gitolite-clone
+ [ ] borg (assimilate emacs packages as git submodules)

*** Github
+ [ ] github-explorer
+ [ ] *github-pullrequest*
+ [ ] *github-stars*
+ [ ] *github-search*
+ [ ] *magithub*
+ [ ] *org2issue*
+ [ ] *treemacs-magit*

*** Archlinux

**** PKGBUILD Mode

#+BEGIN_SRC emacs-lisp :tangle ./packages.el
(package! pkgbuild-mode
  :recipe (:host github :repo "juergenhoetzel/pkgbuild-mode"))
#+END_SRC

#+begin_src emacs-lisp
(use-package! pkgbuild-mode :mode "\\PKGBUILD")
#+end_src


*** Docker

To use what the Doom module configures, install =docker=, =docker-compose= and =docker-machine=. for

The [[file:~/.emacs.d/modules/tools/docker/config.el][doom config file]] looks a little sparse, so the config must be partially
composed in and installed in other module config.el files. Actually, now that I
checked, most of the =docker*= features are being loaded into emacs with some
(e.g. docker-compose-*) being loaded as needed.

#+begin_src emacs-lisp
(use-package! docker
  :config (setq docker-run-as-root t
                docker-image-run-arguments '("-i" "-t" "--rm")))

;; so the ## -*- docker-image-name: "image-name" -*- directive works with ~dockerfile-mode~
(put 'dockerfile-image-name 'safe-local-variable #'stringp)
#+end_src

**** TODO setup =C-c d= as a "devops" prefix, remap =C-c d d= to =docker=


*** Kubernetes

**** TODO setup kubernetes.el :doom:devops:packages:
**** TODO evaluate ~kubectl~ package :doom:devops:packages:

*** SaltStack

From HaoZeke[fn:haozeke]

#+begin_src emacs-lisp :tangle ./packages.el
(package! salt-mode)
#+end_src

#+begin_src emacs-lisp
(use-package salt-mode)
#+end_src

**** Need to check config

*** LSP Mode

**** TODO work out lsp/eldoc interactions

*** LSP UI

#+begin_src emacs-lisp
(setq lsp-ui-peek-list-width 25
      ;; lsp-ui-sideline--last-width

      ;; TODO ensure these are necessary/useful
      lsp-ui-doc-max-width 35 ;; 35 is default
      ;; lsp-ui-doc--inline-width
      
      lsp-ui-imenu-window-width 25)

#+end_src

*** Packages to Evaluate (Tools)

**** Misc
+ [ ] ssh-config-mode
+ [ ] [[https://github.com/jobbflykt/x509-mode][x509-mode]]

**** DIFF & PATCH TOOLS
+ [ ] something for kernel patches?
+ [ ] vdiff & vdiff-magit
+ [ ] *find-file-in-project*
+ [ ] *gitpatch*
+ [ ] flycheck-checkpatch
+ [ ] ztree (recursive diff tool)

**** Docker
+ [ ] SLIME Docker
+ [ ] [[https://github.com/emacs-pe/docker-tramp.el][docker-tramp]] (2017)
+ [ ] [[https://github.com/bosko/docker-cli][docker-cqli]]
+ [ ] lsp-docker
+ [ ] docker

**** Kubernetes
+ [ ] kubernetes.el
+ [ ] [[https://github.com/gruggiero/kubernetes-tramp][kubernetes-tramp]]
+ [ ] [[https://github.com/TxGVNN/emacs-k8s-mode][k8s-mode]] (kubernetes file support + snippets)

**** Devops
+ projectile shell mgmt
  - [ ] term-projectile (projectile + tmux, more or less)
  - [ ] [[https://github.com/waymondo/projector.el][projector]] (projectile-based management of shells & their buffers)
+ [ ] systemd

**** Shell
+ [ ] firestarter (for running shell commands on-save)

**** Logging
+ [ ] logito (emacs logging)

**** Tramp
+ [ ] [[https://github.com/randymorris/tramp-term.el][tramp-term]]
+ [ ] [[https://github.com/oitofelix/tramp-auto-auth][tramp-auth-auth]]
+ [ ] [[https://github.com/cjohansson/emacs-ssh-deploy][ssh-deploy]] (deployment via tramp)

**** AST/Metaprogramming
+ [ ] tree-sitter-mode
+ [ ] [[https://github.com/countvajhula/symex.el][symex]]

**** Debugging
+ [ ] asm-mode, gas-mode

**** LSP
+ [ ] [[https://github.com/joaotavora/eglot][eglot]] (management/automation for LSP servers) + [[https://github.com/non-Jedi/eglot-jl][eglot-jl]]
  - just going with LSP for now, at least until eglot matures.

**** Docs
+ [ ] [[https://github.com/dkogan/xcscope.el][xcscope.el]] for large java/c/c++ projects
  - emacs interface to =cscope=, searches codebase for references/etc

** OS :os:

** ORG :org:

*** TODO setup org to emphasize with parenedit

*** Keys :kbdmaps:

**** TODO remap =C-c i w */_=+~= to wrap with sp-wrap-parens (need to def function?) =from HaoZeke=

#+begin_src emacs-lisp
;; (after! org
;;   (map!

;;    ))
#+end_src

**** TODO remap ~org-forward-heading-same-level~
+ ~C-c C-b~ maps to ~org-backward-heading-same-level~
+ ~C-c C-f~ conflicts with code folding (which does nothing in org/babel)

*** Org Literate

prevent over-eager dotfiles recompilation =from HaoZeke=

#+BEGIN_SRC emacs-lisp
(after! org
  (remove-hook 'after-save-hook #'+literate|recompile-maybe))
#+END_SRC

*** Org Directory

#+begin_src emacs-lisp
(setq org-directory "/data/org")
#+end_src

*** Org Agenda

#+begin_src emacs-lisp
(after! org
  (setq org-log-done 'time
        org-support-shift-select t
        ;;org-agenda-files (concat (file-name-as-directory org-directory) "agenda.org")
        ;; TODO include content from Adam James
        ))
#+end_src

*** Org Capture

**** TODO luca capture templates (thoughts for day)

*** Source Blocks

Don't indent content in source blocks

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

*** Packages to Evaluate (Org)

**** Org
+ akirak
  - [ ] [[https://github.com/akirak/org-starter][org-starter]] (good orgmode presets & asset creation tools?),
  - [ ] [[https://github.com/akirak/ivy-omni-org][ivy-omni-org]] (fast org buffer access)
  - [ ] [[https://github.com/akirak/org-reverse-datetree][org-reverse-datetree]] (do i already have this?)
+ [X] org-bullets vs org-fancy-priorities =+pretty=
+ [ ] org-appear (easier editing of org markup)
+ [ ] [[https://github.com/kidd/org-gcal.el][org-gcal]] or [[https://github.com/dengste/org-caldav][org-caldav]] (probably the latter)
+ [ ] org-variable-pitch
+ [X] org-re-reveal (export reveal.js presentations from org) =+present=
+ [ ] org-elp (preview latex expressions while editing)
+ [ ] [[https://github.com/Fuco1/org-timeline/][org-timeline]]
+ [ ] [[https://spwhitton.name/tech/code/org-d20/][org-d20]] for dungeonmasters
+ [ ] [[https://github.com/stardiviner/org-tag-beautify][org-tag-beautify]] requires org-pretty-tags (conflicts with =+pretty=?)
+ [ ] org-working-set (manage a working set of nodes)
+ [X] org-present & org-re-reveal
+ from HaoZeke
  - [ ] [[https://gitlab.com/phillord/org-drill/][org-drill]] (use org mode for spaced repitition)
  - [ ] org-protocol?
  - [ ] org-ref (highly recommended)
  - [ ] helm-org-rifle (not worth the helm)
  - [ ] org-async
+ [ ] elegant-agenda-mode

**** org-babel
+ [ ] ob-clojurescript
+ [ ] ob-diagram (generate [[http://projects.haskell.org/diagrams/][diagrams]] using haskell tool)


**** TODO setup org-export-async-init-file (see [[https://dotdoom.rgoswami.me/config.html][1.2.3 Async Exports]])

** LANG :lang:

*** ELISP :elisp:

**** TODO configure eldoc
**** TODO configure parenedit

*** LATEX :latex:

(From Hsin Haoyu) Apparently, [[https://mirror.aarnet.edu.au/pub/CTAN/systems/knuth/dist/tex/tex.web][the TeX source code]] was written in Pascal/TeX was
literate programming code written by Knuth in Pascal/TeX.

*** CLOJURE :clojure:

#+begin_src emacs-lisp :tangle ./packages.el
(package! zprint-mode)
#+end_src


#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook 'zprint-mode)
(add-hook 'clojurescript-mode-hook 'zprint-mode)

(setq org-babel-clojure-backend 'cider)
#+end_src

**** LSP :lsp:
***** TODO follow [[https://emacs-lsp.github.io/lsp-mode/tutorials/clojure-guide/][this guide]]
**** TODO aggressive indent (luca)
**** TODO smartparens/lispyparens (luca)

**** TODO explore packages: [0/5]
+ [ ] cider-eval-sexp-fu
+ [ ] [[https://github.com/plexus/walkclj][walkclj]]
+ [ ] 4clojure
+ [ ] [[https://github.com/didibus/anakondo][anakondo]] (or flycheck/make clj-kondo)
+ [ ] ivy-clojuredocs
  - just pick a key for docs...
  - =C-c s c= (apropos à +lookup)

*** JULIA :julia:

Requires using a =:session= variable to track the results/evaluations of blocks

#+begin_src emacs-lisp :tangle ./packages.el
(package! julia-vterm)
(package! ob-julia-vterm)
#+end_src

#+begin_src emacs-lisp
;; TODO: (after! org & julia-vterm?
;;;         ...)
;; (after! org-babel ... )
;; (org-babel-make-language-alias "julia" "julia-vterm")
#+end_src

#+RESULTS:

**** TODO configure julia (and decide on eglot) [1/2]
+ [X] decide on [[https://github.com/shg/ob-julia-vterm.el][ob-julia-vterm]] or [[https://github.com/frederic-santos/ob-ess-julia][ob-ess-julia]]
+ [ ] [[https://github.com/gcv/julia-snail][julia-snail]]?
**** TODO configure org-babel for julia

**** TODO change the default environment for LSP julia
+ ~(setq lsp-julia-default-environment ~/.julia/environments/v1.0")~

*** PLANTUML :plantuml:

Plant UML is also supported by org-babel

*** KDE :kde:

*** QT :qt:

*** C++ :cpp:

**** TODO cmake-font-lock (type-aware highlighting for cmake scripts)

**** Doxygen Support

#+begin_src emacs-lisp :tangle ./packages.el
(package! highlight-doxygen)
#+end_src

Doxygen for c/cpp [fn:haozeke]

#+begin_src emacs-lisp
(use-package! highlight-doxygen
  :hook ((c-mode c++-mode) . highlight-doxygen-mode))
#+end_src

**** More Files
#+begin_src emacs-lisp
;; from HaoZeke/dotdoom
(setq auto-mode-alist (append '(
                                ("\\.C$" . c++-mode)
                                ("\\.cc$" . c++-mode)
                                ("\\.cpp$" . c++-mode)
                                ("\\.inl$" . c++-mode)
                                ("\\.H$" . c++-mode)
                                ("\\.hh$" . c++-mode)
                                ("\\.hpp$" . c++-mode)
                                )
                              auto-mode-alist))
#+end_src

*** Packages to Evaluate (Languages)

**** Misc
+ [ ] [[https://github.com/ericcrosson/pine-script-mode][pine-script-mode]] Trading View

**** Latex and Writing
+ [ ] [[https://joostkremers.github.io/ebib/][ebib]] bibtex database
+ [ ] xah-math-mode
+ [ ] [[https://github.com/emacs-grammarly/lsp-grammarly][lsp-grammar]]
+ [ ] [[https://github.com/cpitclaudel/biblio.el][biblio]] and biblio-core (browse import bibliographic refs; e.g from arXiv)
+ [ ] writegood-mode & wc-mode
+ [ ] [[https://github.com/ymarco/auto-activating-snippets][aas]] and [[https://github.com/tecosaur/LaTeX-auto-activating-snippets][laas]] (a more-performant approach to auto-expanding snippets)
+ [ ] ob-latex-as-png

** BABEL :babel:

+ doom handles most of this stuff in [[file:~/.emacs.d/modules/lang/org/config.el::defun +org-init-babel-lazy-loader-h (][+org-init-babel-lazy-loader-h]]
  - =org-src-lang-modes= maps org-babel keys to modes (=-mode= suffix)
  - =org-babel-load-languages= describes language blocks types permitted to run
  - is the var =org-confirm-babel-evaluate= still in tact?

Load general org-babel config after defining languages

*** TODO ensure this is necessary with =+org-init-babel-lazy-loader-h=

#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-babel-load-languages
               '((julia-vterm . t)
                 (clojure . t)))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
;;(defalias 'org-babel-execute:julia 'org-babel-execute:julia-vterm)
#+end_src

*** ob-async

doesn't support session (see tecosaur's notes)

*** [[https://github.com/krisajenkins/ob-translate][ob-translate]]

For someone who owns a ton of original langauge and interlinear/bilingual books,
getting this into org-mode would be super helpfu. It's way more efficient than
manually writing down the translations and the results are searchable. Finally,
perhaps I can make meaningfull progress on that Español copy of Borges'
collections or my italian copy of Foucault's Pendulum -- both of which are far
superior when the etymological connections are left in tact.

#+begin_src emacs-lisp :tangle ./packages.el
(package! google-translate)
(package! ob-translate)
#+end_src

Config google-translate.el [[https://github.com/atykhonov/google-translate/issues/137][fix for TKK errors]]

#+begin_src emacs-lisp
(use-package! google-translate :demand t
  :init (require 'google-translate)
  :functions (my-google-translate-at-point google-translate--search-tkk)
  :custom (google-translate-backend-method 'curl)
  :config
  (defun google-translate--search-tkk ()
    "Search TKK."
    (list 430675 2721866130))
  (defun my-google-translate-at-point ()
    "reverse translate if prefix"
    (interactive)
    (if current-prefix-arg
        (google-translate-at-point)
      (google-translate-at-point-reverse)))
  :bind
  ;;("C-T". my-google-translate-at-point)
)
#+end_src

Example:

#+BEGIN_SRC translate :src en :dest de,fr,ar,ja :results output :tangle no
This is a test.
#+END_SRC

#+RESULTS:
| de | Das ist ein Test.  |
| fr | C'est un test.     |
| ar | هذا اختبار.        |
| ja | これはテストです。 |

**** TODO emacs support for surfing etymology in wiktionary

#+begin_src translate :src en :dest ja :results output :tangle no
Extra Sensory Perception
#+end_src

#+RESULTS:
: 超感覚的知覚

** EMAIL :email:

** APP :app:

*** Packages to Evaluate (App)

**** IRC
+ [ ] [[https://github.com/jorgenschaefer/circe][circe]] an IRC client, complexity is "between rcirc and ERC"

** CONFIG :config:

Misc config goes here

*** Prism.el

#+begin_src emacs-lisp :tangle ./packages.el
(package! prism)
#+end_src

Use doom colors for theme and toggle with =:leader tP=

#+begin_src emacs-lisp
(use-package! prism
  :hook (emacs-lisp-mode . prism-mode)
  :config (map! :leader :desc "Toggle Prism"
                "tP" (lambda () (interactive) (prism-mode 'toggle)))

  (prism-set-colors :lightens '(0 5 10) :desaturations '(-2.5 0 2.5)
    :colors (-map #'doom-color
                  '(red teal green magenta cyan blue orange dark-cyan violet yellow)))
                  ;; options: red orange green teal yellow blue dark blue magenta violet cyan dark cyan
  )
#+end_src

*** Rainbow Mode

#+begin_src emacs-lisp
(map! :leader :desc "Toggle Rainbow Mode"
      "tR" (lambda () (interactive) (rainbow-mode 'toggle)))


;; TODO fix to autoload rainbow-mode in doom theme files
;; (setq auto-minor-mode-alist (append '(("theme\\.el$" . rainbow-mode))
                                    ;; auto-minor-mode-alist))
#+end_src

**** TODO customize doom [[file:~/.emacs.d/modules/tools/rgb/README.org::*Features][rainbow module]]

* Footnotes

**** TODO: change in-text attributions to one of a set of footnotes

[fn:luca_doom] lccambiaghi [[https://github.com/lccambiaghi/.doom.d][doom config]]
[fn:luca_vanilla] lccambiaghi [[https://github.com/lccambiaghi/vanilla-emacs][emacs config]]
[fn:haozeke] haozeke [[https://github.com/HaoZeke/doom-emacs][doom config]]
[fn:zzamboni] zzamboni [[https://gitlab.com/zzamboni/dot-doom][doom config]]
